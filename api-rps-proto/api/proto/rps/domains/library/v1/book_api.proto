syntax = "proto3";

package rps.domains.library.v1;

option csharp_namespace = "Rps.Domains.Library.V1";
option go_package = "github.azc.ext.hp.com/hp-rps/api-rps-proto-go/api/rps/services/library/v1;libraryv1";
option java_multiple_files = true;
option java_outer_classname = "BookApiProto";
option java_package = "com.rps.domains.library.v1";
option objc_class_prefix = "RDL";
option php_namespace = "Rps\\Domains\\Library\\V1";

import "gogoproto/gogo.proto";
import "rps/domains/library/v1/book.proto";
import "rps/options/method.proto";
import "rps/types/request/v1/create.proto";
import "rps/types/request/v1/delete.proto";
import "rps/types/request/v1/get.proto";
import "rps/types/request/v1/list.proto";
import "rps/types/request/v1/update.proto";

//##############################################################################
// Service Definition
//##############################################################################
//
// BookAPI manages books from the library
service BookAPI {
  //############################################################################
  // Create Methods
  //############################################################################
  //
  // CreateOneBook creates a single resource (unary-unary).
  rpc CreateOneBook(CreateOneBookRequest) returns (CreateOneBookResponse) {
    option (rps.options.method) = {
      scopes: [
        "hpbp.io/scopes/rps/domains/library/book"
      ]
    };
  }
  //############################################################################
  // Find Methods
  //############################################################################
  //
  // FindOneBookByID retuns a single resource matching id (unary-unary).
  // Recommended for fetching a single resource.
  rpc FindOneBookByID(FindOneBookByIDRequest) returns (FindOneBookByIDResponse) {
    option (rps.options.method) = {
      scopes: [
        "hpbp.io/scopes/rps/domains/library/book",
        "hpbp.io/scopes/rps/domains/library/book.read"
      ]
    };
  }
  // FindManyBooksByID retuns a list of resources matching ids (unary-unary).
  // Recommended for fetching a small amount of resources (upper limit of 50 resources per call).
  rpc FindManyBooksByID(FindManyBooksByIDRequest) returns (FindManyBooksByIDResponse) {
    option (rps.options.method) = {
      scopes: [
        "hpbp.io/scopes/rps/domains/library/book",
        "hpbp.io/scopes/rps/domains/library/book.read"
      ]
    };
  }
  // FindManyBooksByIDStream retuns a streaming list of resources matching ids  (unary-stream).
  // Recommended for fetching multiple resources (no upper limit).
  rpc FindManyBooksByIDStream(FindManyBooksByIDStreamRequest) returns (stream FindManyBooksByIDStreamResponse) {
    option (rps.options.method) = {
      scopes: [
        "hpbp.io/scopes/rps/domains/library/book",
        "hpbp.io/scopes/rps/domains/library/book.read"
      ]
    };
  }
  // FindOneBookByQuery retuns a single resource matching query (unary-unary).
  // Recommended for fetching a single resource.
  rpc FindOneBookByQuery(FindOneBookByQueryRequest) returns (FindOneBookByQueryResponse) {
    option (rps.options.method) = {
      scopes: [
        "hpbp.io/scopes/rps/domains/library/book",
        "hpbp.io/scopes/rps/domains/library/book.read"
      ]
    };
  }
  // FindManyBooksByQuery retuns a list of resources matching query (unary-unary).
  // Recommended for fetching a small amount of resources (upper limit of 50 resources per call).
  rpc FindManyBooksByQuery(FindManyBooksByQueryRequest) returns (FindManyBooksByQueryResponse) {
    option (rps.options.method) = {
      scopes: [
        "hpbp.io/scopes/rps/domains/library/book",
        "hpbp.io/scopes/rps/domains/library/book.read"
      ]
    };
  }
  // FindManyBooksByQueryStream retuns a streaming list of resources matching query (unary-stream).
  // Recommended for fetching multiple resources (no upper limit).
  rpc FindManyBooksByQueryStream(FindManyBooksByQueryStreamRequest) returns (stream FindManyBooksByQueryStreamResponse) {
    option (rps.options.method) = {
      scopes: [
        "hpbp.io/scopes/rps/domains/library/book",
        "hpbp.io/scopes/rps/domains/library/book.read"
      ]
    };
  }
  //############################################################################
  // Update Methods
  //############################################################################
  //
  // UpdateOneBookByID updates a single resource (unary-unary).
  rpc UpdateOneBookByID(UpdateOneBookByIDRequest) returns (UpdateOneBookByIDResponse) {
    option (rps.options.method) = {
      scopes: [
        "hpbp.io/scopes/rps/domains/library/book"
      ]
    };
  }
  //############################################################################
  // Delete Methods
  //############################################################################
  //
  // DeleteOneBookByID deletes a single resource (unary-unary).
  rpc DeleteOneBookByID(DeleteOneBookByIDRequest) returns (DeleteOneBookByIDResponse) {
    option (rps.options.method) = {
      scopes: [
        "hpbp.io/scopes/rps/domains/library/book"
      ]
    };
  }
}

//##############################################################################
// Message Definitions
//##############################################################################
//
//##############################################################################
// Create Messages
//##############################################################################
//
message CreateOneBookRequest {
  rps.types.request.v1.Create create_params = 1;
  rps.domains.library.v1.Book new_book = 2;
}

message CreateOneBookResponse {
  rps.domains.library.v1.Book created_book = 1;
}

//##############################################################################
// Find Messages
//##############################################################################
//
message FindOneBookByIDRequest {
  rps.types.request.v1.Get get_params = 1;
  string id = 2 [(gogoproto.customname) = "ID"];
}

message FindOneBookByIDResponse {
  rps.domains.library.v1.Book book = 1;
}

message FindManyBooksByIDRequest {
  rps.types.request.v1.List list_params = 1;
  repeated string ids = 2 [(gogoproto.customname) = "IDs"];
}

message FindManyBooksByIDResponse {
  repeated rps.domains.library.v1.Book books = 1;
}

message FindManyBooksByIDStreamRequest {
  rps.types.request.v1.List list_params = 1;
  repeated string ids = 2 [(gogoproto.customname) = "IDs"];
}

message FindManyBooksByIDStreamResponse {
  rps.domains.library.v1.Book book = 1;
}

message FindOneBookByQueryRequest {
  rps.types.request.v1.Get get_params = 1;
  string query = 2;
}

message FindOneBookByQueryResponse {
  rps.domains.library.v1.Book book = 1;
}

message FindManyBooksByQueryRequest {
  rps.types.request.v1.List list_params = 1;
  string query = 2;
}

message FindManyBooksByQueryResponse {
  repeated rps.domains.library.v1.Book books = 1;
}

message FindManyBooksByQueryStreamRequest {
  rps.types.request.v1.List list_params = 1;
  string query = 2;
}

message FindManyBooksByQueryStreamResponse {
  rps.domains.library.v1.Book book = 1;
}

//##############################################################################
// Update Messages
//##############################################################################
//

message UpdateOneBookByIDRequest {
  rps.types.request.v1.Update update_params = 1;
  string id = 2 [(gogoproto.customname) = "ID"];
  rps.domains.library.v1.Book update_book = 3;
}

message UpdateOneBookByIDResponse {
  rps.domains.library.v1.Book updated_book = 1;
}

//##############################################################################
// Delete Messages
//##############################################################################
//

message DeleteOneBookByIDRequest {
  rps.types.request.v1.Delete delete_params = 1;
  string id = 2 [(gogoproto.customname) = "ID"];
}

message DeleteOneBookByIDResponse {}
