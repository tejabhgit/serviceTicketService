syntax = "proto3";

package rps.domains.ticket.v1;

option csharp_namespace = "Rps.Domains.Ticket.V1";
option go_package = "github.azc.ext.hp.com/hp-rps/api-rps-proto-go/api/rps/services/ticket/v1;ticketv1";
option java_multiple_files = true;
option java_outer_classname = "TicketApiProto";
option java_package = "com.rps.domains.ticket.v1";
option objc_class_prefix = "RDL";
option php_namespace = "Rps\\Domains\\Ticket\\V1";

import "gogoproto/gogo.proto";
import "rps/domains/ticket/v1/ticket.proto";
import "rps/options/method.proto";
import "rps/types/request/v1/create.proto";
import "rps/types/request/v1/delete.proto";
import "rps/types/request/v1/get.proto";
import "rps/types/request/v1/list.proto";
import "rps/types/request/v1/update.proto";

//##############################################################################
// Service Definition
//##############################################################################
//
// TicketAPI manages tickets from the ticket
service TicketAPI {
  //############################################################################
  // Create Methods
  //############################################################################
  //
  // CreateOneTicket creates a single resource (unary-unary).
  rpc CreateOneTicket(CreateOneTicketRequest) returns (CreateOneTicketResponse) {
    option (rps.options.method) = {
      scopes: [
        "hpbp.io/scopes/rps/domains/ticket/ticket"
      ]
    };
  }
  //############################################################################
  // Find Methods
  //############################################################################
  //
  // FindOneTicketByID retuns a single resource matching id (unary-unary).
  // Recommended for fetching a single resource.
  rpc FindOneTicketByID(FindOneTicketByIDRequest) returns (FindOneTicketByIDResponse) {
    option (rps.options.method) = {
      scopes: [
        "hpbp.io/scopes/rps/domains/ticket/ticket",
        "hpbp.io/scopes/rps/domains/ticket/ticket.read"
      ]
    };
  }
  // FindManyTicketsByID retuns a list of resources matching ids (unary-unary).
  // Recommended for fetching a small amount of resources (upper limit of 50 resources per call).
  rpc FindManyTicketsByID(FindManyTicketsByIDRequest) returns (FindManyTicketsByIDResponse) {
    option (rps.options.method) = {
      scopes: [
        "hpbp.io/scopes/rps/domains/ticket/ticket",
        "hpbp.io/scopes/rps/domains/ticket/ticket.read"
      ]
    };
  }
  // FindManyTicketsByIDStream retuns a streaming list of resources matching ids  (unary-stream).
  // Recommended for fetching multiple resources (no upper limit).
  rpc FindManyTicketsByIDStream(FindManyTicketsByIDStreamRequest) returns (stream FindManyTicketsByIDStreamResponse) {
    option (rps.options.method) = {
      scopes: [
        "hpbp.io/scopes/rps/domains/ticket/ticket",
        "hpbp.io/scopes/rps/domains/ticket/ticket.read"
      ]
    };
  }
  // FindOneTicketByQuery retuns a single resource matching query (unary-unary).
  // Recommended for fetching a single resource.
  rpc FindOneTicketByQuery(FindOneTicketByQueryRequest) returns (FindOneTicketByQueryResponse) {
    option (rps.options.method) = {
      scopes: [
        "hpbp.io/scopes/rps/domains/ticket/ticket",
        "hpbp.io/scopes/rps/domains/ticket/ticket.read"
      ]
    };
  }
  // FindManyTicketsByQuery retuns a list of resources matching query (unary-unary).
  // Recommended for fetching a small amount of resources (upper limit of 50 resources per call).
  rpc FindManyTicketsByQuery(FindManyTicketsByQueryRequest) returns (FindManyTicketsByQueryResponse) {
    option (rps.options.method) = {
      scopes: [
        "hpbp.io/scopes/rps/domains/ticket/ticket",
        "hpbp.io/scopes/rps/domains/ticket/ticket.read"
      ]
    };
  }
  // FindManyTicketsByQueryStream retuns a streaming list of resources matching query (unary-stream).
  // Recommended for fetching multiple resources (no upper limit).
  rpc FindManyTicketsByQueryStream(FindManyTicketsByQueryStreamRequest) returns (stream FindManyTicketsByQueryStreamResponse) {
    option (rps.options.method) = {
      scopes: [
        "hpbp.io/scopes/rps/domains/ticket/ticket",
        "hpbp.io/scopes/rps/domains/ticket/ticket.read"
      ]
    };
  }
  //############################################################################
  // Update Methods
  //############################################################################
  //
  // UpdateOneTicketByID updates a single resource (unary-unary).
  rpc UpdateOneTicketByID(UpdateOneTicketByIDRequest) returns (UpdateOneTicketByIDResponse) {
    option (rps.options.method) = {
      scopes: [
        "hpbp.io/scopes/rps/domains/ticket/ticket"
      ]
    };
  }
  //############################################################################
  // Delete Methods
  //############################################################################
  //
  // DeleteOneTicketByID deletes a single resource (unary-unary).
  rpc DeleteOneTicketByID(DeleteOneTicketByIDRequest) returns (DeleteOneTicketByIDResponse) {
    option (rps.options.method) = {
      scopes: [
        "hpbp.io/scopes/rps/domains/ticket/ticket"
      ]
    };
  }
}

//##############################################################################
// Message Definitions
//##############################################################################
//
//##############################################################################
// Create Messages
//##############################################################################
//
message CreateOneTicketRequest {
  rps.types.request.v1.Create create_params = 1;
  rps.domains.ticket.v1.Ticket new_ticket = 2;
}

message CreateOneTicketResponse {
  rps.domains.ticket.v1.Ticket created_ticket = 1;
}

//##############################################################################
// Find Messages
//##############################################################################
//
message FindOneTicketByIDRequest {
  rps.types.request.v1.Get get_params = 1;
  string id = 2 [(gogoproto.customname) = "ID"];
}

message FindOneTicketByIDResponse {
  rps.domains.ticket.v1.Ticket ticket = 1;
}

message FindManyTicketsByIDRequest {
  rps.types.request.v1.List list_params = 1;
  repeated string ids = 2 [(gogoproto.customname) = "IDs"];
}

message FindManyTicketsByIDResponse {
  repeated rps.domains.ticket.v1.Ticket tickets = 1;
}

message FindManyTicketsByIDStreamRequest {
  rps.types.request.v1.List list_params = 1;
  repeated string ids = 2 [(gogoproto.customname) = "IDs"];
}

message FindManyTicketsByIDStreamResponse {
  rps.domains.ticket.v1.Ticket ticket = 1;
}

message FindOneTicketByQueryRequest {
  rps.types.request.v1.Get get_params = 1;
  string query = 2;
}

message FindOneTicketByQueryResponse {
  rps.domains.ticket.v1.Ticket ticket = 1;
}

message FindManyTicketsByQueryRequest {
  rps.types.request.v1.List list_params = 1;
  string query = 2;
}

message FindManyTicketsByQueryResponse {
  repeated rps.domains.ticket.v1.Ticket tickets = 1;
}

message FindManyTicketsByQueryStreamRequest {
  rps.types.request.v1.List list_params = 1;
  string query = 2;
}

message FindManyTicketsByQueryStreamResponse {
  rps.domains.ticket.v1.Ticket ticket = 1;
}

//##############################################################################
// Update Messages
//##############################################################################
//

message UpdateOneTicketByIDRequest {
  rps.types.request.v1.Update update_params = 1;
  string id = 2 [(gogoproto.customname) = "ID"];
  rps.domains.ticket.v1.Ticket update_ticket = 3;
}

message UpdateOneTicketByIDResponse {
  rps.domains.ticket.v1.Ticket updated_ticket = 1;
}

//##############################################################################
// Delete Messages
//##############################################################################
//

message DeleteOneTicketByIDRequest {
  rps.types.request.v1.Delete delete_params = 1;
  string id = 2 [(gogoproto.customname) = "ID"];
}

message DeleteOneTicketByIDResponse {}
