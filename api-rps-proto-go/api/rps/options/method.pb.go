// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rps/options/method.proto

package options

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MethodRule struct {
	// Scopes defines the scopes needed to call this endpoint.
	Scopes []string `protobuf:"bytes,1,rep,name=scopes,proto3" json:"scopes,omitempty"`
}

func (m *MethodRule) Reset()      { *m = MethodRule{} }
func (*MethodRule) ProtoMessage() {}
func (*MethodRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce62584d50133e24, []int{0}
}
func (m *MethodRule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MethodRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MethodRule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MethodRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MethodRule.Merge(m, src)
}
func (m *MethodRule) XXX_Size() int {
	return m.Size()
}
func (m *MethodRule) XXX_DiscardUnknown() {
	xxx_messageInfo_MethodRule.DiscardUnknown(m)
}

var xxx_messageInfo_MethodRule proto.InternalMessageInfo

func (m *MethodRule) GetScopes() []string {
	if m != nil {
		return m.Scopes
	}
	return nil
}

var E_Method = &proto.ExtensionDesc{
	ExtendedType:  (*descriptorpb.MethodOptions)(nil),
	ExtensionType: (*MethodRule)(nil),
	Field:         50007,
	Name:          "rps.options.method",
	Tag:           "bytes,50007,opt,name=method",
	Filename:      "rps/options/method.proto",
}

func init() {
	proto.RegisterType((*MethodRule)(nil), "rps.options.MethodRule")
	proto.RegisterExtension(E_Method)
}

func init() { proto.RegisterFile("rps/options/method.proto", fileDescriptor_ce62584d50133e24) }

var fileDescriptor_ce62584d50133e24 = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xb1, 0x4a, 0x3b, 0x41,
	0x10, 0xc6, 0x77, 0xff, 0x81, 0xc0, 0x7f, 0xaf, 0x10, 0x52, 0x68, 0xb0, 0x18, 0x82, 0x58, 0xa4,
	0xc9, 0x2c, 0x68, 0xa7, 0x5d, 0x40, 0xb0, 0x11, 0x63, 0x4a, 0xbb, 0x64, 0xb3, 0xde, 0x1d, 0x24,
	0xce, 0x72, 0xbb, 0x07, 0x62, 0x65, 0x65, 0xed, 0x63, 0xa8, 0x4f, 0x62, 0x79, 0x9d, 0x29, 0xbd,
	0xbd, 0xc6, 0x32, 0x8f, 0x20, 0x77, 0x7b, 0xe2, 0x55, 0xc3, 0xee, 0xcc, 0xfc, 0xbe, 0x6f, 0x3e,
	0x31, 0xcc, 0x8c, 0x95, 0x64, 0x5c, 0x4a, 0xf7, 0x56, 0x6e, 0xb4, 0x4b, 0x68, 0x85, 0x26, 0x23,
	0x47, 0x83, 0x28, 0x33, 0x16, 0xdb, 0xce, 0xe1, 0x28, 0x26, 0x8a, 0xd7, 0x5a, 0x36, 0xad, 0x65,
	0x7e, 0x27, 0x57, 0xda, 0xaa, 0x2c, 0x35, 0x8e, 0xb2, 0x30, 0x7e, 0x74, 0x2c, 0xc4, 0x55, 0xb3,
	0x3e, 0xcf, 0xd7, 0x7a, 0xb0, 0x2f, 0xfa, 0x56, 0x91, 0xd1, 0x76, 0xc8, 0x47, 0xbd, 0xf1, 0xff,
	0x79, 0xfb, 0x3a, 0xbb, 0x11, 0xfd, 0x20, 0x32, 0x00, 0x0c, 0x48, 0xfc, 0x45, 0x62, 0x58, 0xbf,
	0x0e, 0x8a, 0xc3, 0xcf, 0xe7, 0xde, 0x88, 0x8f, 0xa3, 0x93, 0x03, 0xec, 0xf8, 0xc0, 0x3f, 0x89,
	0x79, 0x0b, 0x9a, 0xbe, 0xf1, 0xa2, 0x04, 0xb6, 0x2d, 0x81, 0xed, 0x4a, 0xe0, 0x4f, 0x1e, 0xf8,
	0xab, 0x07, 0xfe, 0xe1, 0x81, 0x17, 0x1e, 0xf8, 0x97, 0x07, 0xfe, 0xed, 0x81, 0xed, 0x3c, 0xf0,
	0x97, 0x0a, 0x58, 0x51, 0x01, 0xdb, 0x56, 0xc0, 0xc4, 0x9e, 0xa2, 0x4d, 0x17, 0x3d, 0x8d, 0x02,
	0x7b, 0x56, 0xdb, 0x99, 0xf1, 0xdb, 0x8b, 0x38, 0x75, 0x49, 0xbe, 0xc4, 0xc5, 0xa3, 0x42, 0xfd,
	0xe0, 0x30, 0x31, 0xa8, 0x68, 0x23, 0x13, 0x33, 0xa9, 0x13, 0x5b, 0x98, 0xb4, 0xae, 0x93, 0xc6,
	0xfc, 0x24, 0xa6, 0xfa, 0x43, 0x76, 0xa2, 0x3c, 0x6f, 0xeb, 0xfb, 0xbf, 0xe8, 0xd2, 0x28, 0x6c,
	0x8f, 0x5a, 0xf6, 0x9b, 0xf9, 0xd3, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x75, 0xee, 0xd2, 0x82,
	0x76, 0x01, 0x00, 0x00,
}

func (this *MethodRule) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MethodRule)
	if !ok {
		that2, ok := that.(MethodRule)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Scopes) != len(that1.Scopes) {
		return false
	}
	for i := range this.Scopes {
		if this.Scopes[i] != that1.Scopes[i] {
			return false
		}
	}
	return true
}
func (this *MethodRule) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&options.MethodRule{")
	s = append(s, "Scopes: "+fmt.Sprintf("%#v", this.Scopes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMethod(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MethodRule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MethodRule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MethodRule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Scopes) > 0 {
		for iNdEx := len(m.Scopes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Scopes[iNdEx])
			copy(dAtA[i:], m.Scopes[iNdEx])
			i = encodeVarintMethod(dAtA, i, uint64(len(m.Scopes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMethod(dAtA []byte, offset int, v uint64) int {
	offset -= sovMethod(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MethodRule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Scopes) > 0 {
		for _, s := range m.Scopes {
			l = len(s)
			n += 1 + l + sovMethod(uint64(l))
		}
	}
	return n
}

func sovMethod(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMethod(x uint64) (n int) {
	return sovMethod(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MethodRule) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MethodRule{`,
		`Scopes:` + fmt.Sprintf("%v", this.Scopes) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMethod(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MethodRule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMethod
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MethodRule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MethodRule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scopes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMethod
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMethod
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMethod
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Scopes = append(m.Scopes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMethod(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMethod
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMethod(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMethod
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMethod
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMethod
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMethod
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMethod
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMethod
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMethod        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMethod          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMethod = fmt.Errorf("proto: unexpected end of group")
)
