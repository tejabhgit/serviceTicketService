// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package libraryv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BookAPIClient is the client API for BookAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BookAPIClient interface {
	//############################################################################
	// Create Methods
	//############################################################################
	//
	// CreateOneBook creates a single resource (unary-unary).
	CreateOneBook(ctx context.Context, in *CreateOneBookRequest, opts ...grpc.CallOption) (*CreateOneBookResponse, error)
	//############################################################################
	// Find Methods
	//############################################################################
	//
	// FindOneBookByID retuns a single resource matching id (unary-unary).
	// Recommended for fetching a single resource.
	FindOneBookByID(ctx context.Context, in *FindOneBookByIDRequest, opts ...grpc.CallOption) (*FindOneBookByIDResponse, error)
	// FindManyBooksByID retuns a list of resources matching ids (unary-unary).
	// Recommended for fetching a small amount of resources (upper limit of 50 resources per call).
	FindManyBooksByID(ctx context.Context, in *FindManyBooksByIDRequest, opts ...grpc.CallOption) (*FindManyBooksByIDResponse, error)
	// FindManyBooksByIDStream retuns a streaming list of resources matching ids  (unary-stream).
	// Recommended for fetching multiple resources (no upper limit).
	FindManyBooksByIDStream(ctx context.Context, in *FindManyBooksByIDStreamRequest, opts ...grpc.CallOption) (BookAPI_FindManyBooksByIDStreamClient, error)
	// FindOneBookByQuery retuns a single resource matching query (unary-unary).
	// Recommended for fetching a single resource.
	FindOneBookByQuery(ctx context.Context, in *FindOneBookByQueryRequest, opts ...grpc.CallOption) (*FindOneBookByQueryResponse, error)
	// FindManyBooksByQuery retuns a list of resources matching query (unary-unary).
	// Recommended for fetching a small amount of resources (upper limit of 50 resources per call).
	FindManyBooksByQuery(ctx context.Context, in *FindManyBooksByQueryRequest, opts ...grpc.CallOption) (*FindManyBooksByQueryResponse, error)
	// FindManyBooksByQueryStream retuns a streaming list of resources matching query (unary-stream).
	// Recommended for fetching multiple resources (no upper limit).
	FindManyBooksByQueryStream(ctx context.Context, in *FindManyBooksByQueryStreamRequest, opts ...grpc.CallOption) (BookAPI_FindManyBooksByQueryStreamClient, error)
	//############################################################################
	// Update Methods
	//############################################################################
	//
	// UpdateOneBookByID updates a single resource (unary-unary).
	UpdateOneBookByID(ctx context.Context, in *UpdateOneBookByIDRequest, opts ...grpc.CallOption) (*UpdateOneBookByIDResponse, error)
	//############################################################################
	// Delete Methods
	//############################################################################
	//
	// DeleteOneBookByID deletes a single resource (unary-unary).
	DeleteOneBookByID(ctx context.Context, in *DeleteOneBookByIDRequest, opts ...grpc.CallOption) (*DeleteOneBookByIDResponse, error)
}

type bookAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewBookAPIClient(cc grpc.ClientConnInterface) BookAPIClient {
	return &bookAPIClient{cc}
}

func (c *bookAPIClient) CreateOneBook(ctx context.Context, in *CreateOneBookRequest, opts ...grpc.CallOption) (*CreateOneBookResponse, error) {
	out := new(CreateOneBookResponse)
	err := c.cc.Invoke(ctx, "/rps.domains.library.v1.BookAPI/CreateOneBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookAPIClient) FindOneBookByID(ctx context.Context, in *FindOneBookByIDRequest, opts ...grpc.CallOption) (*FindOneBookByIDResponse, error) {
	out := new(FindOneBookByIDResponse)
	err := c.cc.Invoke(ctx, "/rps.domains.library.v1.BookAPI/FindOneBookByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookAPIClient) FindManyBooksByID(ctx context.Context, in *FindManyBooksByIDRequest, opts ...grpc.CallOption) (*FindManyBooksByIDResponse, error) {
	out := new(FindManyBooksByIDResponse)
	err := c.cc.Invoke(ctx, "/rps.domains.library.v1.BookAPI/FindManyBooksByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookAPIClient) FindManyBooksByIDStream(ctx context.Context, in *FindManyBooksByIDStreamRequest, opts ...grpc.CallOption) (BookAPI_FindManyBooksByIDStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &BookAPI_ServiceDesc.Streams[0], "/rps.domains.library.v1.BookAPI/FindManyBooksByIDStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookAPIFindManyBooksByIDStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BookAPI_FindManyBooksByIDStreamClient interface {
	Recv() (*FindManyBooksByIDStreamResponse, error)
	grpc.ClientStream
}

type bookAPIFindManyBooksByIDStreamClient struct {
	grpc.ClientStream
}

func (x *bookAPIFindManyBooksByIDStreamClient) Recv() (*FindManyBooksByIDStreamResponse, error) {
	m := new(FindManyBooksByIDStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookAPIClient) FindOneBookByQuery(ctx context.Context, in *FindOneBookByQueryRequest, opts ...grpc.CallOption) (*FindOneBookByQueryResponse, error) {
	out := new(FindOneBookByQueryResponse)
	err := c.cc.Invoke(ctx, "/rps.domains.library.v1.BookAPI/FindOneBookByQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookAPIClient) FindManyBooksByQuery(ctx context.Context, in *FindManyBooksByQueryRequest, opts ...grpc.CallOption) (*FindManyBooksByQueryResponse, error) {
	out := new(FindManyBooksByQueryResponse)
	err := c.cc.Invoke(ctx, "/rps.domains.library.v1.BookAPI/FindManyBooksByQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookAPIClient) FindManyBooksByQueryStream(ctx context.Context, in *FindManyBooksByQueryStreamRequest, opts ...grpc.CallOption) (BookAPI_FindManyBooksByQueryStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &BookAPI_ServiceDesc.Streams[1], "/rps.domains.library.v1.BookAPI/FindManyBooksByQueryStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookAPIFindManyBooksByQueryStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BookAPI_FindManyBooksByQueryStreamClient interface {
	Recv() (*FindManyBooksByQueryStreamResponse, error)
	grpc.ClientStream
}

type bookAPIFindManyBooksByQueryStreamClient struct {
	grpc.ClientStream
}

func (x *bookAPIFindManyBooksByQueryStreamClient) Recv() (*FindManyBooksByQueryStreamResponse, error) {
	m := new(FindManyBooksByQueryStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bookAPIClient) UpdateOneBookByID(ctx context.Context, in *UpdateOneBookByIDRequest, opts ...grpc.CallOption) (*UpdateOneBookByIDResponse, error) {
	out := new(UpdateOneBookByIDResponse)
	err := c.cc.Invoke(ctx, "/rps.domains.library.v1.BookAPI/UpdateOneBookByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookAPIClient) DeleteOneBookByID(ctx context.Context, in *DeleteOneBookByIDRequest, opts ...grpc.CallOption) (*DeleteOneBookByIDResponse, error) {
	out := new(DeleteOneBookByIDResponse)
	err := c.cc.Invoke(ctx, "/rps.domains.library.v1.BookAPI/DeleteOneBookByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookAPIServer is the server API for BookAPI service.
// All implementations should embed UnimplementedBookAPIServer
// for forward compatibility
type BookAPIServer interface {
	//############################################################################
	// Create Methods
	//############################################################################
	//
	// CreateOneBook creates a single resource (unary-unary).
	CreateOneBook(context.Context, *CreateOneBookRequest) (*CreateOneBookResponse, error)
	//############################################################################
	// Find Methods
	//############################################################################
	//
	// FindOneBookByID retuns a single resource matching id (unary-unary).
	// Recommended for fetching a single resource.
	FindOneBookByID(context.Context, *FindOneBookByIDRequest) (*FindOneBookByIDResponse, error)
	// FindManyBooksByID retuns a list of resources matching ids (unary-unary).
	// Recommended for fetching a small amount of resources (upper limit of 50 resources per call).
	FindManyBooksByID(context.Context, *FindManyBooksByIDRequest) (*FindManyBooksByIDResponse, error)
	// FindManyBooksByIDStream retuns a streaming list of resources matching ids  (unary-stream).
	// Recommended for fetching multiple resources (no upper limit).
	FindManyBooksByIDStream(*FindManyBooksByIDStreamRequest, BookAPI_FindManyBooksByIDStreamServer) error
	// FindOneBookByQuery retuns a single resource matching query (unary-unary).
	// Recommended for fetching a single resource.
	FindOneBookByQuery(context.Context, *FindOneBookByQueryRequest) (*FindOneBookByQueryResponse, error)
	// FindManyBooksByQuery retuns a list of resources matching query (unary-unary).
	// Recommended for fetching a small amount of resources (upper limit of 50 resources per call).
	FindManyBooksByQuery(context.Context, *FindManyBooksByQueryRequest) (*FindManyBooksByQueryResponse, error)
	// FindManyBooksByQueryStream retuns a streaming list of resources matching query (unary-stream).
	// Recommended for fetching multiple resources (no upper limit).
	FindManyBooksByQueryStream(*FindManyBooksByQueryStreamRequest, BookAPI_FindManyBooksByQueryStreamServer) error
	//############################################################################
	// Update Methods
	//############################################################################
	//
	// UpdateOneBookByID updates a single resource (unary-unary).
	UpdateOneBookByID(context.Context, *UpdateOneBookByIDRequest) (*UpdateOneBookByIDResponse, error)
	//############################################################################
	// Delete Methods
	//############################################################################
	//
	// DeleteOneBookByID deletes a single resource (unary-unary).
	DeleteOneBookByID(context.Context, *DeleteOneBookByIDRequest) (*DeleteOneBookByIDResponse, error)
}

// UnimplementedBookAPIServer should be embedded to have forward compatible implementations.
type UnimplementedBookAPIServer struct {
}

func (UnimplementedBookAPIServer) CreateOneBook(context.Context, *CreateOneBookRequest) (*CreateOneBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneBook not implemented")
}
func (UnimplementedBookAPIServer) FindOneBookByID(context.Context, *FindOneBookByIDRequest) (*FindOneBookByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneBookByID not implemented")
}
func (UnimplementedBookAPIServer) FindManyBooksByID(context.Context, *FindManyBooksByIDRequest) (*FindManyBooksByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindManyBooksByID not implemented")
}
func (UnimplementedBookAPIServer) FindManyBooksByIDStream(*FindManyBooksByIDStreamRequest, BookAPI_FindManyBooksByIDStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method FindManyBooksByIDStream not implemented")
}
func (UnimplementedBookAPIServer) FindOneBookByQuery(context.Context, *FindOneBookByQueryRequest) (*FindOneBookByQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneBookByQuery not implemented")
}
func (UnimplementedBookAPIServer) FindManyBooksByQuery(context.Context, *FindManyBooksByQueryRequest) (*FindManyBooksByQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindManyBooksByQuery not implemented")
}
func (UnimplementedBookAPIServer) FindManyBooksByQueryStream(*FindManyBooksByQueryStreamRequest, BookAPI_FindManyBooksByQueryStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method FindManyBooksByQueryStream not implemented")
}
func (UnimplementedBookAPIServer) UpdateOneBookByID(context.Context, *UpdateOneBookByIDRequest) (*UpdateOneBookByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneBookByID not implemented")
}
func (UnimplementedBookAPIServer) DeleteOneBookByID(context.Context, *DeleteOneBookByIDRequest) (*DeleteOneBookByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneBookByID not implemented")
}

// UnsafeBookAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookAPIServer will
// result in compilation errors.
type UnsafeBookAPIServer interface {
	mustEmbedUnimplementedBookAPIServer()
}

func RegisterBookAPIServer(s grpc.ServiceRegistrar, srv BookAPIServer) {
	s.RegisterService(&BookAPI_ServiceDesc, srv)
}

func _BookAPI_CreateOneBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOneBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookAPIServer).CreateOneBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rps.domains.library.v1.BookAPI/CreateOneBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookAPIServer).CreateOneBook(ctx, req.(*CreateOneBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookAPI_FindOneBookByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneBookByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookAPIServer).FindOneBookByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rps.domains.library.v1.BookAPI/FindOneBookByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookAPIServer).FindOneBookByID(ctx, req.(*FindOneBookByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookAPI_FindManyBooksByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindManyBooksByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookAPIServer).FindManyBooksByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rps.domains.library.v1.BookAPI/FindManyBooksByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookAPIServer).FindManyBooksByID(ctx, req.(*FindManyBooksByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookAPI_FindManyBooksByIDStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindManyBooksByIDStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookAPIServer).FindManyBooksByIDStream(m, &bookAPIFindManyBooksByIDStreamServer{stream})
}

type BookAPI_FindManyBooksByIDStreamServer interface {
	Send(*FindManyBooksByIDStreamResponse) error
	grpc.ServerStream
}

type bookAPIFindManyBooksByIDStreamServer struct {
	grpc.ServerStream
}

func (x *bookAPIFindManyBooksByIDStreamServer) Send(m *FindManyBooksByIDStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BookAPI_FindOneBookByQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindOneBookByQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookAPIServer).FindOneBookByQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rps.domains.library.v1.BookAPI/FindOneBookByQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookAPIServer).FindOneBookByQuery(ctx, req.(*FindOneBookByQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookAPI_FindManyBooksByQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindManyBooksByQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookAPIServer).FindManyBooksByQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rps.domains.library.v1.BookAPI/FindManyBooksByQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookAPIServer).FindManyBooksByQuery(ctx, req.(*FindManyBooksByQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookAPI_FindManyBooksByQueryStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindManyBooksByQueryStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookAPIServer).FindManyBooksByQueryStream(m, &bookAPIFindManyBooksByQueryStreamServer{stream})
}

type BookAPI_FindManyBooksByQueryStreamServer interface {
	Send(*FindManyBooksByQueryStreamResponse) error
	grpc.ServerStream
}

type bookAPIFindManyBooksByQueryStreamServer struct {
	grpc.ServerStream
}

func (x *bookAPIFindManyBooksByQueryStreamServer) Send(m *FindManyBooksByQueryStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BookAPI_UpdateOneBookByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOneBookByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookAPIServer).UpdateOneBookByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rps.domains.library.v1.BookAPI/UpdateOneBookByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookAPIServer).UpdateOneBookByID(ctx, req.(*UpdateOneBookByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookAPI_DeleteOneBookByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOneBookByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookAPIServer).DeleteOneBookByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rps.domains.library.v1.BookAPI/DeleteOneBookByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookAPIServer).DeleteOneBookByID(ctx, req.(*DeleteOneBookByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BookAPI_ServiceDesc is the grpc.ServiceDesc for BookAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rps.domains.library.v1.BookAPI",
	HandlerType: (*BookAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOneBook",
			Handler:    _BookAPI_CreateOneBook_Handler,
		},
		{
			MethodName: "FindOneBookByID",
			Handler:    _BookAPI_FindOneBookByID_Handler,
		},
		{
			MethodName: "FindManyBooksByID",
			Handler:    _BookAPI_FindManyBooksByID_Handler,
		},
		{
			MethodName: "FindOneBookByQuery",
			Handler:    _BookAPI_FindOneBookByQuery_Handler,
		},
		{
			MethodName: "FindManyBooksByQuery",
			Handler:    _BookAPI_FindManyBooksByQuery_Handler,
		},
		{
			MethodName: "UpdateOneBookByID",
			Handler:    _BookAPI_UpdateOneBookByID_Handler,
		},
		{
			MethodName: "DeleteOneBookByID",
			Handler:    _BookAPI_DeleteOneBookByID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindManyBooksByIDStream",
			Handler:       _BookAPI_FindManyBooksByIDStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindManyBooksByQueryStream",
			Handler:       _BookAPI_FindManyBooksByQueryStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rps/domains/library/v1/book_api.proto",
}
