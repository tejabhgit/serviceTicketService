// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rps/domains/library/v1/book_api.proto

package libraryv1

import (
	fmt "fmt"
	_ "github.azc.ext.hp.com/hp-rps/api-rps-proto-go/api/rps/options"
	v1 "github.azc.ext.hp.com/hp-rps/api-rps-proto-go/api/rps/types/request/v1"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//##############################################################################
// Message Definitions
//##############################################################################
//
//##############################################################################
// Create Messages
//##############################################################################
//
type CreateOneBookRequest struct {
	CreateParams *v1.Create `protobuf:"bytes,1,opt,name=create_params,json=createParams,proto3" json:"create_params,omitempty"`
	NewBook      *Book      `protobuf:"bytes,2,opt,name=new_book,json=newBook,proto3" json:"new_book,omitempty"`
}

func (m *CreateOneBookRequest) Reset()      { *m = CreateOneBookRequest{} }
func (*CreateOneBookRequest) ProtoMessage() {}
func (*CreateOneBookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8604628a4149c4e8, []int{0}
}
func (m *CreateOneBookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOneBookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOneBookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateOneBookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOneBookRequest.Merge(m, src)
}
func (m *CreateOneBookRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateOneBookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOneBookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOneBookRequest proto.InternalMessageInfo

func (m *CreateOneBookRequest) GetCreateParams() *v1.Create {
	if m != nil {
		return m.CreateParams
	}
	return nil
}

func (m *CreateOneBookRequest) GetNewBook() *Book {
	if m != nil {
		return m.NewBook
	}
	return nil
}

type CreateOneBookResponse struct {
	CreatedBook *Book `protobuf:"bytes,1,opt,name=created_book,json=createdBook,proto3" json:"created_book,omitempty"`
}

func (m *CreateOneBookResponse) Reset()      { *m = CreateOneBookResponse{} }
func (*CreateOneBookResponse) ProtoMessage() {}
func (*CreateOneBookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8604628a4149c4e8, []int{1}
}
func (m *CreateOneBookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOneBookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOneBookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateOneBookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOneBookResponse.Merge(m, src)
}
func (m *CreateOneBookResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateOneBookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOneBookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOneBookResponse proto.InternalMessageInfo

func (m *CreateOneBookResponse) GetCreatedBook() *Book {
	if m != nil {
		return m.CreatedBook
	}
	return nil
}

//##############################################################################
// Find Messages
//##############################################################################
//
type FindOneBookByIDRequest struct {
	GetParams *v1.Get `protobuf:"bytes,1,opt,name=get_params,json=getParams,proto3" json:"get_params,omitempty"`
	ID        string  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *FindOneBookByIDRequest) Reset()      { *m = FindOneBookByIDRequest{} }
func (*FindOneBookByIDRequest) ProtoMessage() {}
func (*FindOneBookByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8604628a4149c4e8, []int{2}
}
func (m *FindOneBookByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindOneBookByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindOneBookByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindOneBookByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindOneBookByIDRequest.Merge(m, src)
}
func (m *FindOneBookByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *FindOneBookByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindOneBookByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindOneBookByIDRequest proto.InternalMessageInfo

func (m *FindOneBookByIDRequest) GetGetParams() *v1.Get {
	if m != nil {
		return m.GetParams
	}
	return nil
}

func (m *FindOneBookByIDRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

type FindOneBookByIDResponse struct {
	Book *Book `protobuf:"bytes,1,opt,name=book,proto3" json:"book,omitempty"`
}

func (m *FindOneBookByIDResponse) Reset()      { *m = FindOneBookByIDResponse{} }
func (*FindOneBookByIDResponse) ProtoMessage() {}
func (*FindOneBookByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8604628a4149c4e8, []int{3}
}
func (m *FindOneBookByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindOneBookByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindOneBookByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindOneBookByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindOneBookByIDResponse.Merge(m, src)
}
func (m *FindOneBookByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *FindOneBookByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindOneBookByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindOneBookByIDResponse proto.InternalMessageInfo

func (m *FindOneBookByIDResponse) GetBook() *Book {
	if m != nil {
		return m.Book
	}
	return nil
}

type FindManyBooksByIDRequest struct {
	ListParams *v1.List `protobuf:"bytes,1,opt,name=list_params,json=listParams,proto3" json:"list_params,omitempty"`
	IDs        []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *FindManyBooksByIDRequest) Reset()      { *m = FindManyBooksByIDRequest{} }
func (*FindManyBooksByIDRequest) ProtoMessage() {}
func (*FindManyBooksByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8604628a4149c4e8, []int{4}
}
func (m *FindManyBooksByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindManyBooksByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindManyBooksByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindManyBooksByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindManyBooksByIDRequest.Merge(m, src)
}
func (m *FindManyBooksByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *FindManyBooksByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindManyBooksByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindManyBooksByIDRequest proto.InternalMessageInfo

func (m *FindManyBooksByIDRequest) GetListParams() *v1.List {
	if m != nil {
		return m.ListParams
	}
	return nil
}

func (m *FindManyBooksByIDRequest) GetIDs() []string {
	if m != nil {
		return m.IDs
	}
	return nil
}

type FindManyBooksByIDResponse struct {
	Books []*Book `protobuf:"bytes,1,rep,name=books,proto3" json:"books,omitempty"`
}

func (m *FindManyBooksByIDResponse) Reset()      { *m = FindManyBooksByIDResponse{} }
func (*FindManyBooksByIDResponse) ProtoMessage() {}
func (*FindManyBooksByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8604628a4149c4e8, []int{5}
}
func (m *FindManyBooksByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindManyBooksByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindManyBooksByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindManyBooksByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindManyBooksByIDResponse.Merge(m, src)
}
func (m *FindManyBooksByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *FindManyBooksByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindManyBooksByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindManyBooksByIDResponse proto.InternalMessageInfo

func (m *FindManyBooksByIDResponse) GetBooks() []*Book {
	if m != nil {
		return m.Books
	}
	return nil
}

type FindManyBooksByIDStreamRequest struct {
	ListParams *v1.List `protobuf:"bytes,1,opt,name=list_params,json=listParams,proto3" json:"list_params,omitempty"`
	IDs        []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *FindManyBooksByIDStreamRequest) Reset()      { *m = FindManyBooksByIDStreamRequest{} }
func (*FindManyBooksByIDStreamRequest) ProtoMessage() {}
func (*FindManyBooksByIDStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8604628a4149c4e8, []int{6}
}
func (m *FindManyBooksByIDStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindManyBooksByIDStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindManyBooksByIDStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindManyBooksByIDStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindManyBooksByIDStreamRequest.Merge(m, src)
}
func (m *FindManyBooksByIDStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *FindManyBooksByIDStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindManyBooksByIDStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindManyBooksByIDStreamRequest proto.InternalMessageInfo

func (m *FindManyBooksByIDStreamRequest) GetListParams() *v1.List {
	if m != nil {
		return m.ListParams
	}
	return nil
}

func (m *FindManyBooksByIDStreamRequest) GetIDs() []string {
	if m != nil {
		return m.IDs
	}
	return nil
}

type FindManyBooksByIDStreamResponse struct {
	Book *Book `protobuf:"bytes,1,opt,name=book,proto3" json:"book,omitempty"`
}

func (m *FindManyBooksByIDStreamResponse) Reset()      { *m = FindManyBooksByIDStreamResponse{} }
func (*FindManyBooksByIDStreamResponse) ProtoMessage() {}
func (*FindManyBooksByIDStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8604628a4149c4e8, []int{7}
}
func (m *FindManyBooksByIDStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindManyBooksByIDStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindManyBooksByIDStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindManyBooksByIDStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindManyBooksByIDStreamResponse.Merge(m, src)
}
func (m *FindManyBooksByIDStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *FindManyBooksByIDStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindManyBooksByIDStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindManyBooksByIDStreamResponse proto.InternalMessageInfo

func (m *FindManyBooksByIDStreamResponse) GetBook() *Book {
	if m != nil {
		return m.Book
	}
	return nil
}

type FindOneBookByQueryRequest struct {
	GetParams *v1.Get `protobuf:"bytes,1,opt,name=get_params,json=getParams,proto3" json:"get_params,omitempty"`
	Query     string  `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *FindOneBookByQueryRequest) Reset()      { *m = FindOneBookByQueryRequest{} }
func (*FindOneBookByQueryRequest) ProtoMessage() {}
func (*FindOneBookByQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8604628a4149c4e8, []int{8}
}
func (m *FindOneBookByQueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindOneBookByQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindOneBookByQueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindOneBookByQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindOneBookByQueryRequest.Merge(m, src)
}
func (m *FindOneBookByQueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *FindOneBookByQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindOneBookByQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindOneBookByQueryRequest proto.InternalMessageInfo

func (m *FindOneBookByQueryRequest) GetGetParams() *v1.Get {
	if m != nil {
		return m.GetParams
	}
	return nil
}

func (m *FindOneBookByQueryRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type FindOneBookByQueryResponse struct {
	Book *Book `protobuf:"bytes,1,opt,name=book,proto3" json:"book,omitempty"`
}

func (m *FindOneBookByQueryResponse) Reset()      { *m = FindOneBookByQueryResponse{} }
func (*FindOneBookByQueryResponse) ProtoMessage() {}
func (*FindOneBookByQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8604628a4149c4e8, []int{9}
}
func (m *FindOneBookByQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindOneBookByQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindOneBookByQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindOneBookByQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindOneBookByQueryResponse.Merge(m, src)
}
func (m *FindOneBookByQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *FindOneBookByQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindOneBookByQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindOneBookByQueryResponse proto.InternalMessageInfo

func (m *FindOneBookByQueryResponse) GetBook() *Book {
	if m != nil {
		return m.Book
	}
	return nil
}

type FindManyBooksByQueryRequest struct {
	ListParams *v1.List `protobuf:"bytes,1,opt,name=list_params,json=listParams,proto3" json:"list_params,omitempty"`
	Query      string   `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *FindManyBooksByQueryRequest) Reset()      { *m = FindManyBooksByQueryRequest{} }
func (*FindManyBooksByQueryRequest) ProtoMessage() {}
func (*FindManyBooksByQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8604628a4149c4e8, []int{10}
}
func (m *FindManyBooksByQueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindManyBooksByQueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindManyBooksByQueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindManyBooksByQueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindManyBooksByQueryRequest.Merge(m, src)
}
func (m *FindManyBooksByQueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *FindManyBooksByQueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindManyBooksByQueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindManyBooksByQueryRequest proto.InternalMessageInfo

func (m *FindManyBooksByQueryRequest) GetListParams() *v1.List {
	if m != nil {
		return m.ListParams
	}
	return nil
}

func (m *FindManyBooksByQueryRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type FindManyBooksByQueryResponse struct {
	Books []*Book `protobuf:"bytes,1,rep,name=books,proto3" json:"books,omitempty"`
}

func (m *FindManyBooksByQueryResponse) Reset()      { *m = FindManyBooksByQueryResponse{} }
func (*FindManyBooksByQueryResponse) ProtoMessage() {}
func (*FindManyBooksByQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8604628a4149c4e8, []int{11}
}
func (m *FindManyBooksByQueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindManyBooksByQueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindManyBooksByQueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindManyBooksByQueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindManyBooksByQueryResponse.Merge(m, src)
}
func (m *FindManyBooksByQueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *FindManyBooksByQueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindManyBooksByQueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindManyBooksByQueryResponse proto.InternalMessageInfo

func (m *FindManyBooksByQueryResponse) GetBooks() []*Book {
	if m != nil {
		return m.Books
	}
	return nil
}

type FindManyBooksByQueryStreamRequest struct {
	ListParams *v1.List `protobuf:"bytes,1,opt,name=list_params,json=listParams,proto3" json:"list_params,omitempty"`
	Query      string   `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
}

func (m *FindManyBooksByQueryStreamRequest) Reset()      { *m = FindManyBooksByQueryStreamRequest{} }
func (*FindManyBooksByQueryStreamRequest) ProtoMessage() {}
func (*FindManyBooksByQueryStreamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8604628a4149c4e8, []int{12}
}
func (m *FindManyBooksByQueryStreamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindManyBooksByQueryStreamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindManyBooksByQueryStreamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindManyBooksByQueryStreamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindManyBooksByQueryStreamRequest.Merge(m, src)
}
func (m *FindManyBooksByQueryStreamRequest) XXX_Size() int {
	return m.Size()
}
func (m *FindManyBooksByQueryStreamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindManyBooksByQueryStreamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindManyBooksByQueryStreamRequest proto.InternalMessageInfo

func (m *FindManyBooksByQueryStreamRequest) GetListParams() *v1.List {
	if m != nil {
		return m.ListParams
	}
	return nil
}

func (m *FindManyBooksByQueryStreamRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type FindManyBooksByQueryStreamResponse struct {
	Book *Book `protobuf:"bytes,1,opt,name=book,proto3" json:"book,omitempty"`
}

func (m *FindManyBooksByQueryStreamResponse) Reset()      { *m = FindManyBooksByQueryStreamResponse{} }
func (*FindManyBooksByQueryStreamResponse) ProtoMessage() {}
func (*FindManyBooksByQueryStreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8604628a4149c4e8, []int{13}
}
func (m *FindManyBooksByQueryStreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindManyBooksByQueryStreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindManyBooksByQueryStreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindManyBooksByQueryStreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindManyBooksByQueryStreamResponse.Merge(m, src)
}
func (m *FindManyBooksByQueryStreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *FindManyBooksByQueryStreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FindManyBooksByQueryStreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FindManyBooksByQueryStreamResponse proto.InternalMessageInfo

func (m *FindManyBooksByQueryStreamResponse) GetBook() *Book {
	if m != nil {
		return m.Book
	}
	return nil
}

type UpdateOneBookByIDRequest struct {
	UpdateParams *v1.Update `protobuf:"bytes,1,opt,name=update_params,json=updateParams,proto3" json:"update_params,omitempty"`
}

func (m *UpdateOneBookByIDRequest) Reset()      { *m = UpdateOneBookByIDRequest{} }
func (*UpdateOneBookByIDRequest) ProtoMessage() {}
func (*UpdateOneBookByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8604628a4149c4e8, []int{14}
}
func (m *UpdateOneBookByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateOneBookByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateOneBookByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateOneBookByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOneBookByIDRequest.Merge(m, src)
}
func (m *UpdateOneBookByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateOneBookByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOneBookByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOneBookByIDRequest proto.InternalMessageInfo

func (m *UpdateOneBookByIDRequest) GetUpdateParams() *v1.Update {
	if m != nil {
		return m.UpdateParams
	}
	return nil
}

type UpdateOneBookByIDResponse struct {
}

func (m *UpdateOneBookByIDResponse) Reset()      { *m = UpdateOneBookByIDResponse{} }
func (*UpdateOneBookByIDResponse) ProtoMessage() {}
func (*UpdateOneBookByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8604628a4149c4e8, []int{15}
}
func (m *UpdateOneBookByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateOneBookByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateOneBookByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateOneBookByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateOneBookByIDResponse.Merge(m, src)
}
func (m *UpdateOneBookByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateOneBookByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateOneBookByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateOneBookByIDResponse proto.InternalMessageInfo

type DeleteOneBookByIDRequest struct {
	DeleteParams *v1.Delete `protobuf:"bytes,1,opt,name=delete_params,json=deleteParams,proto3" json:"delete_params,omitempty"`
}

func (m *DeleteOneBookByIDRequest) Reset()      { *m = DeleteOneBookByIDRequest{} }
func (*DeleteOneBookByIDRequest) ProtoMessage() {}
func (*DeleteOneBookByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8604628a4149c4e8, []int{16}
}
func (m *DeleteOneBookByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteOneBookByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteOneBookByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteOneBookByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteOneBookByIDRequest.Merge(m, src)
}
func (m *DeleteOneBookByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteOneBookByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteOneBookByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteOneBookByIDRequest proto.InternalMessageInfo

func (m *DeleteOneBookByIDRequest) GetDeleteParams() *v1.Delete {
	if m != nil {
		return m.DeleteParams
	}
	return nil
}

type DeleteOneBookByIDResponse struct {
}

func (m *DeleteOneBookByIDResponse) Reset()      { *m = DeleteOneBookByIDResponse{} }
func (*DeleteOneBookByIDResponse) ProtoMessage() {}
func (*DeleteOneBookByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8604628a4149c4e8, []int{17}
}
func (m *DeleteOneBookByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteOneBookByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteOneBookByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteOneBookByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteOneBookByIDResponse.Merge(m, src)
}
func (m *DeleteOneBookByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteOneBookByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteOneBookByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteOneBookByIDResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CreateOneBookRequest)(nil), "rps.domains.library.v1.CreateOneBookRequest")
	proto.RegisterType((*CreateOneBookResponse)(nil), "rps.domains.library.v1.CreateOneBookResponse")
	proto.RegisterType((*FindOneBookByIDRequest)(nil), "rps.domains.library.v1.FindOneBookByIDRequest")
	proto.RegisterType((*FindOneBookByIDResponse)(nil), "rps.domains.library.v1.FindOneBookByIDResponse")
	proto.RegisterType((*FindManyBooksByIDRequest)(nil), "rps.domains.library.v1.FindManyBooksByIDRequest")
	proto.RegisterType((*FindManyBooksByIDResponse)(nil), "rps.domains.library.v1.FindManyBooksByIDResponse")
	proto.RegisterType((*FindManyBooksByIDStreamRequest)(nil), "rps.domains.library.v1.FindManyBooksByIDStreamRequest")
	proto.RegisterType((*FindManyBooksByIDStreamResponse)(nil), "rps.domains.library.v1.FindManyBooksByIDStreamResponse")
	proto.RegisterType((*FindOneBookByQueryRequest)(nil), "rps.domains.library.v1.FindOneBookByQueryRequest")
	proto.RegisterType((*FindOneBookByQueryResponse)(nil), "rps.domains.library.v1.FindOneBookByQueryResponse")
	proto.RegisterType((*FindManyBooksByQueryRequest)(nil), "rps.domains.library.v1.FindManyBooksByQueryRequest")
	proto.RegisterType((*FindManyBooksByQueryResponse)(nil), "rps.domains.library.v1.FindManyBooksByQueryResponse")
	proto.RegisterType((*FindManyBooksByQueryStreamRequest)(nil), "rps.domains.library.v1.FindManyBooksByQueryStreamRequest")
	proto.RegisterType((*FindManyBooksByQueryStreamResponse)(nil), "rps.domains.library.v1.FindManyBooksByQueryStreamResponse")
	proto.RegisterType((*UpdateOneBookByIDRequest)(nil), "rps.domains.library.v1.UpdateOneBookByIDRequest")
	proto.RegisterType((*UpdateOneBookByIDResponse)(nil), "rps.domains.library.v1.UpdateOneBookByIDResponse")
	proto.RegisterType((*DeleteOneBookByIDRequest)(nil), "rps.domains.library.v1.DeleteOneBookByIDRequest")
	proto.RegisterType((*DeleteOneBookByIDResponse)(nil), "rps.domains.library.v1.DeleteOneBookByIDResponse")
}

func init() {
	proto.RegisterFile("rps/domains/library/v1/book_api.proto", fileDescriptor_8604628a4149c4e8)
}

var fileDescriptor_8604628a4149c4e8 = []byte{
	// 967 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xd8, 0xb4, 0x21, 0x2f, 0x8e, 0x50, 0x57, 0x21, 0x38, 0xdb, 0x6a, 0xd3, 0xae, 0x84,
	0x28, 0x52, 0x3d, 0x1b, 0xbb, 0x88, 0x02, 0x3d, 0xa0, 0x18, 0x0b, 0x14, 0x11, 0x68, 0xd8, 0x88,
	0x08, 0xa1, 0xa0, 0x68, 0xed, 0x1d, 0xd9, 0x4b, 0x62, 0xcf, 0x74, 0x67, 0xed, 0xd6, 0x9c, 0xf8,
	0x09, 0x88, 0x2b, 0x37, 0x0e, 0x80, 0x10, 0x12, 0xa7, 0x5c, 0x7a, 0xe2, 0x08, 0x88, 0x43, 0x8e,
	0x3d, 0x55, 0x64, 0x73, 0xe1, 0x82, 0xd4, 0x9f, 0x80, 0x66, 0x67, 0x08, 0x76, 0x3c, 0x6b, 0xd6,
	0x36, 0x9c, 0xbc, 0x9e, 0x79, 0xef, 0xfb, 0xbe, 0x37, 0x6f, 0xf6, 0x7b, 0x5a, 0x78, 0x31, 0x64,
	0xdc, 0xf1, 0x69, 0xc7, 0x0b, 0xba, 0xdc, 0x39, 0x0a, 0x1a, 0xa1, 0x17, 0x0e, 0x9c, 0x7e, 0xc5,
	0x69, 0x50, 0x7a, 0x78, 0xe0, 0xb1, 0x00, 0xb3, 0x90, 0x46, 0xd4, 0x58, 0x0d, 0x19, 0xc7, 0x2a,
	0x0c, 0xab, 0x30, 0xdc, 0xaf, 0x98, 0x2b, 0x2d, 0xda, 0xa2, 0x49, 0x88, 0x23, 0x9e, 0x64, 0xb4,
	0x79, 0x63, 0x02, 0xa8, 0x0a, 0x29, 0x89, 0x10, 0xca, 0xa2, 0x80, 0x76, 0xb9, 0xd3, 0x21, 0x51,
	0x9b, 0xfa, 0xc3, 0xc9, 0xd1, 0x80, 0x11, 0xee, 0x84, 0xe4, 0x7e, 0x8f, 0xf0, 0x48, 0xa4, 0x36,
	0x43, 0xe2, 0x45, 0x64, 0x62, 0x88, 0x4f, 0x8e, 0xc8, 0x79, 0x88, 0xa5, 0x0d, 0x69, 0x91, 0x48,
	0xed, 0xaf, 0x6b, 0xf7, 0x8f, 0x02, 0x1e, 0x4d, 0xe4, 0xe8, 0x31, 0xff, 0x5c, 0x86, 0xfd, 0x25,
	0x82, 0x95, 0xb7, 0x12, 0x5d, 0xf7, 0xba, 0xa4, 0x46, 0xe9, 0xa1, 0x2b, 0x03, 0x8d, 0x4d, 0x58,
	0x96, 0x7a, 0x0f, 0x98, 0x17, 0x7a, 0x1d, 0x5e, 0x42, 0xd7, 0xd1, 0xcd, 0xa5, 0xea, 0x35, 0x2c,
	0x4e, 0x31, 0xc1, 0xc4, 0x0a, 0x13, 0xf7, 0x2b, 0x58, 0x42, 0xb8, 0x45, 0x99, 0xb2, 0x93, 0x64,
	0x18, 0x77, 0xe0, 0xd9, 0x2e, 0x79, 0x70, 0x20, 0x4e, 0xac, 0x94, 0x1f, 0xca, 0x1e, 0xef, 0x01,
	0x4e, 0x98, 0x17, 0xba, 0xe4, 0x81, 0x78, 0xb0, 0x3f, 0x82, 0xe7, 0x2f, 0x68, 0xe2, 0x8c, 0x76,
	0x39, 0x31, 0xde, 0x04, 0xc5, 0xe0, 0x4b, 0x54, 0x94, 0x01, 0x75, 0x49, 0x65, 0x24, 0xc8, 0x9f,
	0xc2, 0xea, 0xdb, 0x41, 0xd7, 0x57, 0xb8, 0xb5, 0xc1, 0x56, 0xfd, 0xef, 0x7a, 0x5f, 0x03, 0x68,
	0x91, 0x68, 0xb4, 0xd8, 0x35, 0x7d, 0xb1, 0xef, 0x90, 0xc8, 0x5d, 0x6c, 0x91, 0x48, 0x95, 0xb9,
	0x0a, 0xf9, 0xc0, 0x4f, 0x0a, 0x5c, 0xac, 0x5d, 0x8e, 0x9f, 0xac, 0xe7, 0xb7, 0xea, 0x6e, 0x3e,
	0xf0, 0xed, 0x77, 0xe1, 0x85, 0x31, 0x2e, 0x55, 0xc7, 0x06, 0x3c, 0x93, 0x59, 0x7f, 0x12, 0x69,
	0x87, 0x50, 0x12, 0x60, 0xef, 0x79, 0xdd, 0x81, 0x58, 0xe5, 0xc3, 0xd2, 0xef, 0xc2, 0x92, 0x68,
	0xfa, 0xa8, 0x76, 0x53, 0xaf, 0x7d, 0x3b, 0xe0, 0x91, 0x0b, 0x22, 0x5c, 0xa9, 0x5f, 0x83, 0x42,
	0xe0, 0xf3, 0x52, 0xfe, 0x7a, 0xe1, 0xe6, 0x62, 0x6d, 0x21, 0x7e, 0xb2, 0x5e, 0xd8, 0xaa, 0x73,
	0x57, 0xac, 0xd9, 0xf7, 0x60, 0x4d, 0xc3, 0xa9, 0x4a, 0xa8, 0xc2, 0x25, 0x21, 0x4c, 0xd0, 0x15,
	0xfe, 0xb5, 0x06, 0x19, 0x6a, 0x3f, 0x04, 0x6b, 0x0c, 0x70, 0x37, 0x0a, 0x89, 0xd7, 0xf9, 0xbf,
	0x4b, 0xd9, 0x85, 0xf5, 0x54, 0xe6, 0x99, 0x7b, 0x72, 0x28, 0xcf, 0xe7, 0xbc, 0xc1, 0x1f, 0xf4,
	0x48, 0x38, 0x98, 0xff, 0x3e, 0xad, 0xc0, 0xa5, 0xfb, 0x02, 0x49, 0x5e, 0x29, 0x57, 0xfe, 0xb1,
	0xdf, 0x07, 0x53, 0x47, 0x36, 0xb3, 0x78, 0x06, 0x57, 0x2f, 0x9c, 0xc8, 0x88, 0xfc, 0xb9, 0x1a,
	0xa1, 0xaf, 0xc0, 0x85, 0x6b, 0x7a, 0xc6, 0x39, 0x6e, 0x54, 0x1f, 0x6e, 0xe8, 0x30, 0xff, 0xc3,
	0x4b, 0xa5, 0xaf, 0x65, 0x0f, 0xec, 0x49, 0xbc, 0x33, 0x77, 0xe5, 0x13, 0x28, 0x7d, 0x98, 0xd8,
	0xb3, 0xc6, 0xa1, 0x36, 0x61, 0x59, 0x5a, 0x77, 0x26, 0x47, 0x96, 0x30, 0x6e, 0x51, 0xa6, 0xc8,
	0x62, 0xec, 0xab, 0xb0, 0xa6, 0x81, 0x97, 0x6a, 0x05, 0x77, 0x3d, 0x19, 0x3f, 0x7a, 0x6e, 0x39,
	0x9a, 0x32, 0x71, 0x4b, 0x18, 0xb7, 0x28, 0x53, 0xfe, 0xe1, 0xd6, 0xc0, 0x4b, 0xee, 0xea, 0x6f,
	0x45, 0x58, 0x10, 0x8b, 0x9b, 0x3b, 0x5b, 0xc6, 0x57, 0x08, 0x96, 0x47, 0xec, 0xdf, 0xb8, 0x95,
	0x76, 0x72, 0xba, 0xc9, 0x65, 0x96, 0x33, 0x46, 0xab, 0xb2, 0xcb, 0x8f, 0x8e, 0x4b, 0x2f, 0xc3,
	0x4b, 0x6d, 0xd6, 0x60, 0x38, 0xa0, 0x0e, 0x6f, 0xd2, 0x64, 0x5e, 0x6a, 0xa6, 0xbf, 0xe8, 0x90,
	0xf1, 0x0d, 0x82, 0xe7, 0x2e, 0xd8, 0xba, 0x81, 0xd3, 0x18, 0xf5, 0xb3, 0xc6, 0x74, 0x32, 0xc7,
	0x2b, 0x8d, 0xd5, 0x47, 0xc7, 0x25, 0x0c, 0xb7, 0x32, 0x6a, 0xc4, 0x21, 0xf1, 0x7c, 0xe3, 0x07,
	0x04, 0x57, 0xc6, 0x3c, 0xcf, 0xd8, 0x98, 0x44, 0xad, 0x9b, 0x2e, 0x66, 0x65, 0x8a, 0x8c, 0x39,
	0xe4, 0xfe, 0x84, 0xe4, 0xb8, 0xd4, 0x58, 0xb4, 0xf1, 0x6a, 0x66, 0x09, 0x23, 0x2f, 0xbe, 0x79,
	0x67, 0xea, 0xbc, 0xd9, 0x0b, 0xd8, 0x40, 0xc6, 0x8f, 0x08, 0x8c, 0x71, 0x8f, 0x36, 0x2a, 0x99,
	0xba, 0x3d, 0xec, 0xbe, 0x66, 0x75, 0x9a, 0x94, 0x39, 0x0e, 0xfd, 0x18, 0xc1, 0x8a, 0xce, 0xc7,
	0x8c, 0xdb, 0x19, 0x4f, 0x6e, 0x44, 0xf5, 0x2b, 0xd3, 0x25, 0xcd, 0xa1, 0xfb, 0x17, 0x24, 0xa7,
	0xa1, 0xde, 0x7f, 0x8d, 0xd7, 0xa7, 0x11, 0x32, 0x7a, 0x65, 0xde, 0x98, 0x25, 0x75, 0xae, 0x5b,
	0xf3, 0x2d, 0x82, 0x2b, 0x63, 0xa6, 0x9c, 0xfe, 0x9e, 0xa6, 0x8d, 0x87, 0xf4, 0xf7, 0x34, 0xdd,
	0xf1, 0xa7, 0xb4, 0x3e, 0xa1, 0x74, 0xcc, 0xc2, 0xd3, 0x95, 0xa6, 0x0d, 0x93, 0x74, 0xa5, 0xa9,
	0xf3, 0x61, 0x4a, 0xa5, 0xb5, 0x3f, 0xd1, 0xc9, 0xa9, 0x95, 0x7b, 0x7c, 0x6a, 0xe5, 0x9e, 0x9e,
	0x5a, 0xe8, 0xf3, 0xd8, 0x42, 0xdf, 0xc5, 0x16, 0xfa, 0x39, 0xb6, 0xd0, 0x49, 0x6c, 0xa1, 0xdf,
	0x63, 0x0b, 0xfd, 0x11, 0x5b, 0xb9, 0xa7, 0xb1, 0x85, 0xbe, 0x38, 0xb3, 0x72, 0x27, 0x67, 0x56,
	0xee, 0xf1, 0x99, 0x95, 0x03, 0xb3, 0x49, 0x3b, 0x29, 0xda, 0x6a, 0xc5, 0x64, 0x3c, 0xb1, 0x60,
	0x47, 0x7c, 0x36, 0xed, 0xa0, 0x8f, 0x77, 0x5b, 0x41, 0xd4, 0xee, 0x35, 0xb0, 0xf7, 0x59, 0x13,
	0x93, 0x87, 0x11, 0x6e, 0x33, 0xdc, 0xa4, 0x1d, 0xa7, 0xcd, 0xca, 0x42, 0x95, 0xc7, 0x02, 0xf1,
	0x5b, 0x4e, 0x3e, 0xb2, 0xca, 0x2d, 0x2a, 0x16, 0x12, 0xb9, 0x9c, 0x84, 0xfd, 0xa0, 0x49, 0x86,
	0x3f, 0x29, 0xef, 0xaa, 0xc7, 0x7e, 0xe5, 0xeb, 0x7c, 0xc1, 0xad, 0x6f, 0x7f, 0x9f, 0x5f, 0x75,
	0x19, 0xc7, 0x75, 0xa5, 0x61, 0x5b, 0x69, 0xd8, 0xab, 0xfc, 0x9a, 0x6c, 0xec, 0xab, 0x8d, 0x7d,
	0xb5, 0xb1, 0xbf, 0x57, 0x69, 0x5c, 0x4e, 0x78, 0x6e, 0xff, 0x15, 0x00, 0x00, 0xff, 0xff, 0x0e,
	0xa9, 0xee, 0xcc, 0x0a, 0x0f, 0x00, 0x00,
}

func (this *CreateOneBookRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateOneBookRequest)
	if !ok {
		that2, ok := that.(CreateOneBookRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreateParams.Equal(that1.CreateParams) {
		return false
	}
	if !this.NewBook.Equal(that1.NewBook) {
		return false
	}
	return true
}
func (this *CreateOneBookResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateOneBookResponse)
	if !ok {
		that2, ok := that.(CreateOneBookResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.CreatedBook.Equal(that1.CreatedBook) {
		return false
	}
	return true
}
func (this *FindOneBookByIDRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindOneBookByIDRequest)
	if !ok {
		that2, ok := that.(FindOneBookByIDRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GetParams.Equal(that1.GetParams) {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	return true
}
func (this *FindOneBookByIDResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindOneBookByIDResponse)
	if !ok {
		that2, ok := that.(FindOneBookByIDResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Book.Equal(that1.Book) {
		return false
	}
	return true
}
func (this *FindManyBooksByIDRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindManyBooksByIDRequest)
	if !ok {
		that2, ok := that.(FindManyBooksByIDRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ListParams.Equal(that1.ListParams) {
		return false
	}
	if len(this.IDs) != len(that1.IDs) {
		return false
	}
	for i := range this.IDs {
		if this.IDs[i] != that1.IDs[i] {
			return false
		}
	}
	return true
}
func (this *FindManyBooksByIDResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindManyBooksByIDResponse)
	if !ok {
		that2, ok := that.(FindManyBooksByIDResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Books) != len(that1.Books) {
		return false
	}
	for i := range this.Books {
		if !this.Books[i].Equal(that1.Books[i]) {
			return false
		}
	}
	return true
}
func (this *FindManyBooksByIDStreamRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindManyBooksByIDStreamRequest)
	if !ok {
		that2, ok := that.(FindManyBooksByIDStreamRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ListParams.Equal(that1.ListParams) {
		return false
	}
	if len(this.IDs) != len(that1.IDs) {
		return false
	}
	for i := range this.IDs {
		if this.IDs[i] != that1.IDs[i] {
			return false
		}
	}
	return true
}
func (this *FindManyBooksByIDStreamResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindManyBooksByIDStreamResponse)
	if !ok {
		that2, ok := that.(FindManyBooksByIDStreamResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Book.Equal(that1.Book) {
		return false
	}
	return true
}
func (this *FindOneBookByQueryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindOneBookByQueryRequest)
	if !ok {
		that2, ok := that.(FindOneBookByQueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GetParams.Equal(that1.GetParams) {
		return false
	}
	if this.Query != that1.Query {
		return false
	}
	return true
}
func (this *FindOneBookByQueryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindOneBookByQueryResponse)
	if !ok {
		that2, ok := that.(FindOneBookByQueryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Book.Equal(that1.Book) {
		return false
	}
	return true
}
func (this *FindManyBooksByQueryRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindManyBooksByQueryRequest)
	if !ok {
		that2, ok := that.(FindManyBooksByQueryRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ListParams.Equal(that1.ListParams) {
		return false
	}
	if this.Query != that1.Query {
		return false
	}
	return true
}
func (this *FindManyBooksByQueryResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindManyBooksByQueryResponse)
	if !ok {
		that2, ok := that.(FindManyBooksByQueryResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Books) != len(that1.Books) {
		return false
	}
	for i := range this.Books {
		if !this.Books[i].Equal(that1.Books[i]) {
			return false
		}
	}
	return true
}
func (this *FindManyBooksByQueryStreamRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindManyBooksByQueryStreamRequest)
	if !ok {
		that2, ok := that.(FindManyBooksByQueryStreamRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ListParams.Equal(that1.ListParams) {
		return false
	}
	if this.Query != that1.Query {
		return false
	}
	return true
}
func (this *FindManyBooksByQueryStreamResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FindManyBooksByQueryStreamResponse)
	if !ok {
		that2, ok := that.(FindManyBooksByQueryStreamResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Book.Equal(that1.Book) {
		return false
	}
	return true
}
func (this *UpdateOneBookByIDRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateOneBookByIDRequest)
	if !ok {
		that2, ok := that.(UpdateOneBookByIDRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateParams.Equal(that1.UpdateParams) {
		return false
	}
	return true
}
func (this *UpdateOneBookByIDResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateOneBookByIDResponse)
	if !ok {
		that2, ok := that.(UpdateOneBookByIDResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *DeleteOneBookByIDRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteOneBookByIDRequest)
	if !ok {
		that2, ok := that.(DeleteOneBookByIDRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DeleteParams.Equal(that1.DeleteParams) {
		return false
	}
	return true
}
func (this *DeleteOneBookByIDResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteOneBookByIDResponse)
	if !ok {
		that2, ok := that.(DeleteOneBookByIDResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *CreateOneBookRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&libraryv1.CreateOneBookRequest{")
	if this.CreateParams != nil {
		s = append(s, "CreateParams: "+fmt.Sprintf("%#v", this.CreateParams)+",\n")
	}
	if this.NewBook != nil {
		s = append(s, "NewBook: "+fmt.Sprintf("%#v", this.NewBook)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateOneBookResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&libraryv1.CreateOneBookResponse{")
	if this.CreatedBook != nil {
		s = append(s, "CreatedBook: "+fmt.Sprintf("%#v", this.CreatedBook)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FindOneBookByIDRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&libraryv1.FindOneBookByIDRequest{")
	if this.GetParams != nil {
		s = append(s, "GetParams: "+fmt.Sprintf("%#v", this.GetParams)+",\n")
	}
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FindOneBookByIDResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&libraryv1.FindOneBookByIDResponse{")
	if this.Book != nil {
		s = append(s, "Book: "+fmt.Sprintf("%#v", this.Book)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FindManyBooksByIDRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&libraryv1.FindManyBooksByIDRequest{")
	if this.ListParams != nil {
		s = append(s, "ListParams: "+fmt.Sprintf("%#v", this.ListParams)+",\n")
	}
	s = append(s, "IDs: "+fmt.Sprintf("%#v", this.IDs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FindManyBooksByIDResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&libraryv1.FindManyBooksByIDResponse{")
	if this.Books != nil {
		s = append(s, "Books: "+fmt.Sprintf("%#v", this.Books)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FindManyBooksByIDStreamRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&libraryv1.FindManyBooksByIDStreamRequest{")
	if this.ListParams != nil {
		s = append(s, "ListParams: "+fmt.Sprintf("%#v", this.ListParams)+",\n")
	}
	s = append(s, "IDs: "+fmt.Sprintf("%#v", this.IDs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FindManyBooksByIDStreamResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&libraryv1.FindManyBooksByIDStreamResponse{")
	if this.Book != nil {
		s = append(s, "Book: "+fmt.Sprintf("%#v", this.Book)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FindOneBookByQueryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&libraryv1.FindOneBookByQueryRequest{")
	if this.GetParams != nil {
		s = append(s, "GetParams: "+fmt.Sprintf("%#v", this.GetParams)+",\n")
	}
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FindOneBookByQueryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&libraryv1.FindOneBookByQueryResponse{")
	if this.Book != nil {
		s = append(s, "Book: "+fmt.Sprintf("%#v", this.Book)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FindManyBooksByQueryRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&libraryv1.FindManyBooksByQueryRequest{")
	if this.ListParams != nil {
		s = append(s, "ListParams: "+fmt.Sprintf("%#v", this.ListParams)+",\n")
	}
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FindManyBooksByQueryResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&libraryv1.FindManyBooksByQueryResponse{")
	if this.Books != nil {
		s = append(s, "Books: "+fmt.Sprintf("%#v", this.Books)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FindManyBooksByQueryStreamRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&libraryv1.FindManyBooksByQueryStreamRequest{")
	if this.ListParams != nil {
		s = append(s, "ListParams: "+fmt.Sprintf("%#v", this.ListParams)+",\n")
	}
	s = append(s, "Query: "+fmt.Sprintf("%#v", this.Query)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FindManyBooksByQueryStreamResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&libraryv1.FindManyBooksByQueryStreamResponse{")
	if this.Book != nil {
		s = append(s, "Book: "+fmt.Sprintf("%#v", this.Book)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateOneBookByIDRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&libraryv1.UpdateOneBookByIDRequest{")
	if this.UpdateParams != nil {
		s = append(s, "UpdateParams: "+fmt.Sprintf("%#v", this.UpdateParams)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateOneBookByIDResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&libraryv1.UpdateOneBookByIDResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteOneBookByIDRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&libraryv1.DeleteOneBookByIDRequest{")
	if this.DeleteParams != nil {
		s = append(s, "DeleteParams: "+fmt.Sprintf("%#v", this.DeleteParams)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteOneBookByIDResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&libraryv1.DeleteOneBookByIDResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBookApi(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *CreateOneBookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOneBookRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateOneBookRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewBook != nil {
		{
			size, err := m.NewBook.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBookApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CreateParams != nil {
		{
			size, err := m.CreateParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBookApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateOneBookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOneBookResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateOneBookResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedBook != nil {
		{
			size, err := m.CreatedBook.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBookApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FindOneBookByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindOneBookByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindOneBookByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintBookApi(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x12
	}
	if m.GetParams != nil {
		{
			size, err := m.GetParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBookApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FindOneBookByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindOneBookByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindOneBookByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Book != nil {
		{
			size, err := m.Book.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBookApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FindManyBooksByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindManyBooksByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindManyBooksByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IDs) > 0 {
		for iNdEx := len(m.IDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IDs[iNdEx])
			copy(dAtA[i:], m.IDs[iNdEx])
			i = encodeVarintBookApi(dAtA, i, uint64(len(m.IDs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ListParams != nil {
		{
			size, err := m.ListParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBookApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FindManyBooksByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindManyBooksByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindManyBooksByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Books) > 0 {
		for iNdEx := len(m.Books) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Books[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBookApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FindManyBooksByIDStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindManyBooksByIDStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindManyBooksByIDStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IDs) > 0 {
		for iNdEx := len(m.IDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.IDs[iNdEx])
			copy(dAtA[i:], m.IDs[iNdEx])
			i = encodeVarintBookApi(dAtA, i, uint64(len(m.IDs[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ListParams != nil {
		{
			size, err := m.ListParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBookApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FindManyBooksByIDStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindManyBooksByIDStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindManyBooksByIDStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Book != nil {
		{
			size, err := m.Book.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBookApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FindOneBookByQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindOneBookByQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindOneBookByQueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintBookApi(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x12
	}
	if m.GetParams != nil {
		{
			size, err := m.GetParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBookApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FindOneBookByQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindOneBookByQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindOneBookByQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Book != nil {
		{
			size, err := m.Book.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBookApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FindManyBooksByQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindManyBooksByQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindManyBooksByQueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintBookApi(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x12
	}
	if m.ListParams != nil {
		{
			size, err := m.ListParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBookApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FindManyBooksByQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindManyBooksByQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindManyBooksByQueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Books) > 0 {
		for iNdEx := len(m.Books) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Books[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBookApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FindManyBooksByQueryStreamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindManyBooksByQueryStreamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindManyBooksByQueryStreamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintBookApi(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x12
	}
	if m.ListParams != nil {
		{
			size, err := m.ListParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBookApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FindManyBooksByQueryStreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindManyBooksByQueryStreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindManyBooksByQueryStreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Book != nil {
		{
			size, err := m.Book.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBookApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateOneBookByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOneBookByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateOneBookByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateParams != nil {
		{
			size, err := m.UpdateParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBookApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateOneBookByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateOneBookByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateOneBookByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DeleteOneBookByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteOneBookByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteOneBookByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeleteParams != nil {
		{
			size, err := m.DeleteParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBookApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteOneBookByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteOneBookByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteOneBookByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintBookApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovBookApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateOneBookRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreateParams != nil {
		l = m.CreateParams.Size()
		n += 1 + l + sovBookApi(uint64(l))
	}
	if m.NewBook != nil {
		l = m.NewBook.Size()
		n += 1 + l + sovBookApi(uint64(l))
	}
	return n
}

func (m *CreateOneBookResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreatedBook != nil {
		l = m.CreatedBook.Size()
		n += 1 + l + sovBookApi(uint64(l))
	}
	return n
}

func (m *FindOneBookByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GetParams != nil {
		l = m.GetParams.Size()
		n += 1 + l + sovBookApi(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovBookApi(uint64(l))
	}
	return n
}

func (m *FindOneBookByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Book != nil {
		l = m.Book.Size()
		n += 1 + l + sovBookApi(uint64(l))
	}
	return n
}

func (m *FindManyBooksByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ListParams != nil {
		l = m.ListParams.Size()
		n += 1 + l + sovBookApi(uint64(l))
	}
	if len(m.IDs) > 0 {
		for _, s := range m.IDs {
			l = len(s)
			n += 1 + l + sovBookApi(uint64(l))
		}
	}
	return n
}

func (m *FindManyBooksByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Books) > 0 {
		for _, e := range m.Books {
			l = e.Size()
			n += 1 + l + sovBookApi(uint64(l))
		}
	}
	return n
}

func (m *FindManyBooksByIDStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ListParams != nil {
		l = m.ListParams.Size()
		n += 1 + l + sovBookApi(uint64(l))
	}
	if len(m.IDs) > 0 {
		for _, s := range m.IDs {
			l = len(s)
			n += 1 + l + sovBookApi(uint64(l))
		}
	}
	return n
}

func (m *FindManyBooksByIDStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Book != nil {
		l = m.Book.Size()
		n += 1 + l + sovBookApi(uint64(l))
	}
	return n
}

func (m *FindOneBookByQueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GetParams != nil {
		l = m.GetParams.Size()
		n += 1 + l + sovBookApi(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovBookApi(uint64(l))
	}
	return n
}

func (m *FindOneBookByQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Book != nil {
		l = m.Book.Size()
		n += 1 + l + sovBookApi(uint64(l))
	}
	return n
}

func (m *FindManyBooksByQueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ListParams != nil {
		l = m.ListParams.Size()
		n += 1 + l + sovBookApi(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovBookApi(uint64(l))
	}
	return n
}

func (m *FindManyBooksByQueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Books) > 0 {
		for _, e := range m.Books {
			l = e.Size()
			n += 1 + l + sovBookApi(uint64(l))
		}
	}
	return n
}

func (m *FindManyBooksByQueryStreamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ListParams != nil {
		l = m.ListParams.Size()
		n += 1 + l + sovBookApi(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovBookApi(uint64(l))
	}
	return n
}

func (m *FindManyBooksByQueryStreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Book != nil {
		l = m.Book.Size()
		n += 1 + l + sovBookApi(uint64(l))
	}
	return n
}

func (m *UpdateOneBookByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateParams != nil {
		l = m.UpdateParams.Size()
		n += 1 + l + sovBookApi(uint64(l))
	}
	return n
}

func (m *UpdateOneBookByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DeleteOneBookByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DeleteParams != nil {
		l = m.DeleteParams.Size()
		n += 1 + l + sovBookApi(uint64(l))
	}
	return n
}

func (m *DeleteOneBookByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovBookApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBookApi(x uint64) (n int) {
	return sovBookApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *CreateOneBookRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateOneBookRequest{`,
		`CreateParams:` + strings.Replace(fmt.Sprintf("%v", this.CreateParams), "Create", "v1.Create", 1) + `,`,
		`NewBook:` + strings.Replace(fmt.Sprintf("%v", this.NewBook), "Book", "Book", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateOneBookResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateOneBookResponse{`,
		`CreatedBook:` + strings.Replace(fmt.Sprintf("%v", this.CreatedBook), "Book", "Book", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FindOneBookByIDRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FindOneBookByIDRequest{`,
		`GetParams:` + strings.Replace(fmt.Sprintf("%v", this.GetParams), "Get", "v1.Get", 1) + `,`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FindOneBookByIDResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FindOneBookByIDResponse{`,
		`Book:` + strings.Replace(fmt.Sprintf("%v", this.Book), "Book", "Book", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FindManyBooksByIDRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FindManyBooksByIDRequest{`,
		`ListParams:` + strings.Replace(fmt.Sprintf("%v", this.ListParams), "List", "v1.List", 1) + `,`,
		`IDs:` + fmt.Sprintf("%v", this.IDs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FindManyBooksByIDResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBooks := "[]*Book{"
	for _, f := range this.Books {
		repeatedStringForBooks += strings.Replace(fmt.Sprintf("%v", f), "Book", "Book", 1) + ","
	}
	repeatedStringForBooks += "}"
	s := strings.Join([]string{`&FindManyBooksByIDResponse{`,
		`Books:` + repeatedStringForBooks + `,`,
		`}`,
	}, "")
	return s
}
func (this *FindManyBooksByIDStreamRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FindManyBooksByIDStreamRequest{`,
		`ListParams:` + strings.Replace(fmt.Sprintf("%v", this.ListParams), "List", "v1.List", 1) + `,`,
		`IDs:` + fmt.Sprintf("%v", this.IDs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FindManyBooksByIDStreamResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FindManyBooksByIDStreamResponse{`,
		`Book:` + strings.Replace(fmt.Sprintf("%v", this.Book), "Book", "Book", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FindOneBookByQueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FindOneBookByQueryRequest{`,
		`GetParams:` + strings.Replace(fmt.Sprintf("%v", this.GetParams), "Get", "v1.Get", 1) + `,`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FindOneBookByQueryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FindOneBookByQueryResponse{`,
		`Book:` + strings.Replace(fmt.Sprintf("%v", this.Book), "Book", "Book", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FindManyBooksByQueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FindManyBooksByQueryRequest{`,
		`ListParams:` + strings.Replace(fmt.Sprintf("%v", this.ListParams), "List", "v1.List", 1) + `,`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FindManyBooksByQueryResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForBooks := "[]*Book{"
	for _, f := range this.Books {
		repeatedStringForBooks += strings.Replace(fmt.Sprintf("%v", f), "Book", "Book", 1) + ","
	}
	repeatedStringForBooks += "}"
	s := strings.Join([]string{`&FindManyBooksByQueryResponse{`,
		`Books:` + repeatedStringForBooks + `,`,
		`}`,
	}, "")
	return s
}
func (this *FindManyBooksByQueryStreamRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FindManyBooksByQueryStreamRequest{`,
		`ListParams:` + strings.Replace(fmt.Sprintf("%v", this.ListParams), "List", "v1.List", 1) + `,`,
		`Query:` + fmt.Sprintf("%v", this.Query) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FindManyBooksByQueryStreamResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FindManyBooksByQueryStreamResponse{`,
		`Book:` + strings.Replace(fmt.Sprintf("%v", this.Book), "Book", "Book", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateOneBookByIDRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateOneBookByIDRequest{`,
		`UpdateParams:` + strings.Replace(fmt.Sprintf("%v", this.UpdateParams), "Update", "v1.Update", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateOneBookByIDResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateOneBookByIDResponse{`,
		`}`,
	}, "")
	return s
}
func (this *DeleteOneBookByIDRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteOneBookByIDRequest{`,
		`DeleteParams:` + strings.Replace(fmt.Sprintf("%v", this.DeleteParams), "Delete", "v1.Delete", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteOneBookByIDResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteOneBookByIDResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringBookApi(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *CreateOneBookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOneBookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOneBookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreateParams == nil {
				m.CreateParams = &v1.Create{}
			}
			if err := m.CreateParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewBook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NewBook == nil {
				m.NewBook = &Book{}
			}
			if err := m.NewBook.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOneBookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOneBookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOneBookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBook", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedBook == nil {
				m.CreatedBook = &Book{}
			}
			if err := m.CreatedBook.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindOneBookByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindOneBookByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindOneBookByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetParams == nil {
				m.GetParams = &v1.Get{}
			}
			if err := m.GetParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindOneBookByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindOneBookByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindOneBookByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Book", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Book == nil {
				m.Book = &Book{}
			}
			if err := m.Book.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindManyBooksByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindManyBooksByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindManyBooksByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ListParams == nil {
				m.ListParams = &v1.List{}
			}
			if err := m.ListParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDs = append(m.IDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindManyBooksByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindManyBooksByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindManyBooksByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Books", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Books = append(m.Books, &Book{})
			if err := m.Books[len(m.Books)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindManyBooksByIDStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindManyBooksByIDStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindManyBooksByIDStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ListParams == nil {
				m.ListParams = &v1.List{}
			}
			if err := m.ListParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IDs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IDs = append(m.IDs, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindManyBooksByIDStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindManyBooksByIDStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindManyBooksByIDStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Book", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Book == nil {
				m.Book = &Book{}
			}
			if err := m.Book.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindOneBookByQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindOneBookByQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindOneBookByQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetParams == nil {
				m.GetParams = &v1.Get{}
			}
			if err := m.GetParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindOneBookByQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindOneBookByQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindOneBookByQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Book", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Book == nil {
				m.Book = &Book{}
			}
			if err := m.Book.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindManyBooksByQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindManyBooksByQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindManyBooksByQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ListParams == nil {
				m.ListParams = &v1.List{}
			}
			if err := m.ListParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindManyBooksByQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindManyBooksByQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindManyBooksByQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Books", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Books = append(m.Books, &Book{})
			if err := m.Books[len(m.Books)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindManyBooksByQueryStreamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindManyBooksByQueryStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindManyBooksByQueryStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ListParams == nil {
				m.ListParams = &v1.List{}
			}
			if err := m.ListParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBookApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBookApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindManyBooksByQueryStreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindManyBooksByQueryStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindManyBooksByQueryStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Book", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Book == nil {
				m.Book = &Book{}
			}
			if err := m.Book.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOneBookByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOneBookByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOneBookByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateParams == nil {
				m.UpdateParams = &v1.Update{}
			}
			if err := m.UpdateParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateOneBookByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateOneBookByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateOneBookByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBookApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteOneBookByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteOneBookByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteOneBookByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeleteParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBookApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBookApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBookApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeleteParams == nil {
				m.DeleteParams = &v1.Delete{}
			}
			if err := m.DeleteParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBookApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteOneBookByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBookApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteOneBookByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteOneBookByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBookApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBookApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBookApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBookApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBookApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBookApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBookApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBookApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBookApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBookApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBookApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBookApi = fmt.Errorf("proto: unexpected end of group")
)
