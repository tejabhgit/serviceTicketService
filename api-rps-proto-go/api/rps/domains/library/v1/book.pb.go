// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rps/domains/library/v1/book.proto

package libraryv1

import (
	fmt "fmt"
	v1 "github.azc.ext.hp.com/hp-rps/api-rps-proto-go/api/rps/types/meta/v1"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Book represents a book in the library.
type Book struct {
	// ID unique identifier.
	// Read-Only
	ID string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ISBN International Standard Book Number.
	ISBN string `protobuf:"bytes,2,opt,name=isbn,proto3" json:"isbn,omitempty"`
	// Title of the book.
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// Author of the book.
	Author string `protobuf:"bytes,4,opt,name=author,proto3" json:"author,omitempty"`
	// Meta object
	// Read-Only
	Meta *v1.Meta `protobuf:"bytes,100,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (m *Book) Reset()      { *m = Book{} }
func (*Book) ProtoMessage() {}
func (*Book) Descriptor() ([]byte, []int) {
	return fileDescriptor_411eead685f2fe1a, []int{0}
}
func (m *Book) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Book) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Book.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Book) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Book.Merge(m, src)
}
func (m *Book) XXX_Size() int {
	return m.Size()
}
func (m *Book) XXX_DiscardUnknown() {
	xxx_messageInfo_Book.DiscardUnknown(m)
}

var xxx_messageInfo_Book proto.InternalMessageInfo

func (m *Book) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Book) GetISBN() string {
	if m != nil {
		return m.ISBN
	}
	return ""
}

func (m *Book) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Book) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Book) GetMeta() *v1.Meta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func init() {
	proto.RegisterType((*Book)(nil), "rps.domains.library.v1.Book")
}

func init() { proto.RegisterFile("rps/domains/library/v1/book.proto", fileDescriptor_411eead685f2fe1a) }

var fileDescriptor_411eead685f2fe1a = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x3f, 0xcf, 0xd3, 0x30,
	0x10, 0xc6, 0xe3, 0xbc, 0xa1, 0xa2, 0x66, 0x8b, 0xaa, 0x10, 0x55, 0x95, 0x5b, 0x98, 0x2a, 0xa1,
	0xda, 0x0a, 0x8c, 0x6c, 0x51, 0x97, 0x4a, 0x05, 0x55, 0xa9, 0xd4, 0x01, 0x75, 0xc9, 0x3f, 0x25,
	0x56, 0x9b, 0xda, 0x4a, 0xdc, 0x88, 0x32, 0xf1, 0x11, 0xd8, 0xd8, 0x99, 0x10, 0x9f, 0x04, 0x31,
	0x75, 0xec, 0x54, 0x51, 0x77, 0x41, 0x4c, 0xfd, 0x08, 0xc8, 0xae, 0x07, 0x86, 0x77, 0xf2, 0xdd,
	0xfd, 0x1e, 0xdd, 0x3d, 0x77, 0x86, 0x2f, 0x6a, 0xde, 0x90, 0x8c, 0x55, 0x31, 0xdd, 0x35, 0x64,
	0x4b, 0x93, 0x3a, 0xae, 0x0f, 0xa4, 0x0d, 0x48, 0xc2, 0xd8, 0x06, 0xf3, 0x9a, 0x09, 0xe6, 0x7a,
	0x35, 0x6f, 0xb0, 0x91, 0x60, 0x23, 0xc1, 0x6d, 0xd0, 0xef, 0x15, 0xac, 0x60, 0x5a, 0x42, 0x54,
	0x74, 0x57, 0xf7, 0x07, 0xaa, 0xa1, 0x38, 0xf0, 0xbc, 0x21, 0x55, 0x2e, 0x62, 0xd5, 0x4b, 0xbd,
	0x77, 0xfa, 0xf2, 0x2b, 0x80, 0x4e, 0xc8, 0xd8, 0xc6, 0xf5, 0xa0, 0x4d, 0x33, 0x1f, 0x8c, 0xc0,
	0xb8, 0x1b, 0x76, 0xe4, 0x79, 0x68, 0xcf, 0xa6, 0x91, 0x4d, 0x33, 0x77, 0x00, 0x1d, 0xda, 0x24,
	0x3b, 0xdf, 0xd6, 0xe4, 0xa9, 0x3c, 0x0f, 0x9d, 0xd9, 0x32, 0x7c, 0x1f, 0xe9, 0xaa, 0xdb, 0x83,
	0x4f, 0x04, 0x15, 0xdb, 0xdc, 0x7f, 0x50, 0x38, 0xba, 0x27, 0xae, 0x07, 0x3b, 0xf1, 0x5e, 0x94,
	0xac, 0xf6, 0x1d, 0x5d, 0x36, 0x99, 0xfb, 0x0a, 0x3a, 0x6a, 0xb4, 0x9f, 0x8d, 0xc0, 0xf8, 0xd9,
	0xeb, 0xe7, 0x58, 0xed, 0xa1, 0x9d, 0x61, 0xed, 0xa8, 0x0d, 0xf0, 0xbb, 0x5c, 0xc4, 0x91, 0x16,
	0x85, 0x7f, 0xc1, 0xf1, 0x82, 0xac, 0xd3, 0x05, 0x59, 0xb7, 0x0b, 0x02, 0x9f, 0x25, 0x02, 0xdf,
	0x25, 0x02, 0x3f, 0x25, 0x02, 0x47, 0x89, 0xc0, 0x6f, 0x89, 0xc0, 0x1f, 0x89, 0xac, 0x9b, 0x44,
	0xe0, 0xcb, 0x15, 0x59, 0xc7, 0x2b, 0xb2, 0x4e, 0x57, 0x64, 0xc1, 0x7e, 0xca, 0x2a, 0xfc, 0xf8,
	0x81, 0xc2, 0xae, 0xda, 0x74, 0xa1, 0xf6, 0x5e, 0x80, 0x0f, 0xcb, 0x82, 0x8a, 0x72, 0x9f, 0xe0,
	0xf8, 0x53, 0x8a, 0xf3, 0x8f, 0x02, 0x97, 0x1c, 0xa7, 0xac, 0x22, 0x25, 0x9f, 0xa8, 0x83, 0xc5,
	0x9c, 0xaa, 0x77, 0xa2, 0xaf, 0x34, 0x29, 0x98, 0x2a, 0x10, 0x05, 0x9a, 0xbc, 0x6e, 0x69, 0x9a,
	0xff, 0xff, 0x37, 0x6f, 0x4d, 0xd8, 0x06, 0xdf, 0xec, 0x87, 0x68, 0x3a, 0xff, 0x61, 0x7b, 0x11,
	0x6f, 0xf0, 0xd4, 0x18, 0x98, 0x1b, 0x03, 0xab, 0xe0, 0x97, 0x06, 0x6b, 0x03, 0xd6, 0x06, 0xac,
	0x57, 0x41, 0xd2, 0xd1, 0x73, 0xde, 0xfc, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xc2, 0xa0, 0xc8, 0xec,
	0xfe, 0x01, 0x00, 0x00,
}

func (this *Book) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Book)
	if !ok {
		that2, ok := that.(Book)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.ISBN != that1.ISBN {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Author != that1.Author {
		return false
	}
	if !this.Meta.Equal(that1.Meta) {
		return false
	}
	return true
}
func (this *Book) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&libraryv1.Book{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "ISBN: "+fmt.Sprintf("%#v", this.ISBN)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Author: "+fmt.Sprintf("%#v", this.Author)+",\n")
	if this.Meta != nil {
		s = append(s, "Meta: "+fmt.Sprintf("%#v", this.Meta)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBook(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Book) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Book) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Book) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Meta != nil {
		{
			size, err := m.Meta.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBook(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Author) > 0 {
		i -= len(m.Author)
		copy(dAtA[i:], m.Author)
		i = encodeVarintBook(dAtA, i, uint64(len(m.Author)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintBook(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ISBN) > 0 {
		i -= len(m.ISBN)
		copy(dAtA[i:], m.ISBN)
		i = encodeVarintBook(dAtA, i, uint64(len(m.ISBN)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintBook(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBook(dAtA []byte, offset int, v uint64) int {
	offset -= sovBook(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Book) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.ISBN)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 2 + l + sovBook(uint64(l))
	}
	return n
}

func sovBook(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBook(x uint64) (n int) {
	return sovBook(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Book) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Book{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`ISBN:` + fmt.Sprintf("%v", this.ISBN) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Author:` + fmt.Sprintf("%v", this.Author) + `,`,
		`Meta:` + strings.Replace(fmt.Sprintf("%v", this.Meta), "Meta", "v1.Meta", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBook(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Book) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Book: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Book: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ISBN", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ISBN = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &v1.Meta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBook(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBook
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBook
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBook
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBook
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBook        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBook          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBook = fmt.Errorf("proto: unexpected end of group")
)
