// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rps/types/request/v1/update.proto

package requestv1

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Generic update params inplemented by all CRUD style update methods.
type Update struct {
	// List of fields to update.
	// If empty all fields will be updated.
	// ID is Read-Only and cannot be updated.
	// Meta is managed by the server and will always be auto-updated.
	UpdateMask []string `protobuf:"bytes,1,rep,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// Dry run, validate the request but skip updating the resource.
	// Defaults to false
	ValidateOnly bool `protobuf:"varint,2,opt,name=validate_only,json=validateOnly,proto3" json:"validate_only,omitempty"`
	// Unique id for the server to track duplicate requests.
	// Required format is UUIDv4
	RequestID string `protobuf:"bytes,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Do not return the updated resource in the RPC response.
	// Defaults to false
	SkipResult bool `protobuf:"varint,4,opt,name=skip_result,json=skipResult,proto3" json:"skip_result,omitempty"`
}

func (m *Update) Reset()      { *m = Update{} }
func (*Update) ProtoMessage() {}
func (*Update) Descriptor() ([]byte, []int) {
	return fileDescriptor_e97dc2cb0073bb57, []int{0}
}
func (m *Update) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Update) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Update.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Update) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Update.Merge(m, src)
}
func (m *Update) XXX_Size() int {
	return m.Size()
}
func (m *Update) XXX_DiscardUnknown() {
	xxx_messageInfo_Update.DiscardUnknown(m)
}

var xxx_messageInfo_Update proto.InternalMessageInfo

func (m *Update) GetUpdateMask() []string {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

func (m *Update) GetValidateOnly() bool {
	if m != nil {
		return m.ValidateOnly
	}
	return false
}

func (m *Update) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

func (m *Update) GetSkipResult() bool {
	if m != nil {
		return m.SkipResult
	}
	return false
}

func init() {
	proto.RegisterType((*Update)(nil), "rps.types.request.v1.Update")
}

func init() { proto.RegisterFile("rps/types/request/v1/update.proto", fileDescriptor_e97dc2cb0073bb57) }

var fileDescriptor_e97dc2cb0073bb57 = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xb1, 0x6e, 0xea, 0x30,
	0x14, 0x86, 0x63, 0xb8, 0x42, 0x37, 0xe6, 0xb2, 0x44, 0x0c, 0xd1, 0x1d, 0x0c, 0xf7, 0x76, 0x61,
	0x28, 0xb6, 0xa2, 0x8e, 0xdd, 0x50, 0x17, 0x86, 0xaa, 0xc8, 0xa2, 0x0c, 0x15, 0x12, 0x0a, 0x10,
	0x85, 0x88, 0x80, 0xdd, 0xd8, 0x89, 0x4a, 0xa7, 0x3e, 0x42, 0x5f, 0xa0, 0x4b, 0xa7, 0xaa, 0x4f,
	0x52, 0x75, 0x62, 0x64, 0xaa, 0x8a, 0xb3, 0x74, 0xe4, 0x11, 0x2a, 0x3b, 0xe9, 0xc6, 0x94, 0xa3,
	0x4f, 0x5f, 0xce, 0xaf, 0xf3, 0x1b, 0xfe, 0x4b, 0xb8, 0x20, 0x72, 0xc3, 0x03, 0x41, 0x92, 0xe0,
	0x36, 0x0d, 0x84, 0x24, 0x99, 0x47, 0x52, 0x3e, 0xf7, 0x65, 0x80, 0x79, 0xc2, 0x24, 0x73, 0x9a,
	0x09, 0x17, 0xd8, 0x28, 0xb8, 0x54, 0x70, 0xe6, 0xfd, 0x6d, 0x86, 0x2c, 0x64, 0x46, 0x20, 0x7a,
	0x2a, 0xdc, 0xff, 0x4f, 0x00, 0xd6, 0xae, 0xcd, 0xcf, 0x4e, 0x0b, 0xd6, 0x8b, 0x35, 0x93, 0x95,
	0x2f, 0x96, 0x2e, 0x68, 0x57, 0x3b, 0x36, 0x85, 0x05, 0xba, 0xf4, 0xc5, 0xd2, 0x39, 0x81, 0x8d,
	0xcc, 0x8f, 0x23, 0xa3, 0xb0, 0x75, 0xbc, 0x71, 0x2b, 0x6d, 0xd0, 0xf9, 0x4d, 0xff, 0xfc, 0xc0,
	0xab, 0x75, 0xbc, 0x71, 0x4e, 0x21, 0x2c, 0x43, 0x27, 0xd1, 0xdc, 0xad, 0xb6, 0x41, 0xc7, 0xee,
	0x35, 0xd4, 0x47, 0xcb, 0xa6, 0x05, 0xed, 0x5f, 0x50, 0xbb, 0x14, 0xfa, 0x73, 0x9d, 0x29, 0x96,
	0x11, 0x9f, 0x24, 0x81, 0x48, 0x63, 0xe9, 0xfe, 0x32, 0x0b, 0xa1, 0x46, 0xd4, 0x90, 0x5e, 0x0e,
	0xb6, 0x7b, 0x64, 0xed, 0xf6, 0xc8, 0x3a, 0xec, 0x11, 0x78, 0x50, 0x08, 0xbc, 0x28, 0x04, 0xde,
	0x14, 0x02, 0x5b, 0x85, 0xc0, 0xa7, 0x42, 0xe0, 0x4b, 0x21, 0xeb, 0xa0, 0x10, 0x78, 0xcc, 0x91,
	0xb5, 0xcd, 0x91, 0xb5, 0xcb, 0x91, 0x05, 0xdd, 0x19, 0x5b, 0xe1, 0x63, 0x35, 0xf4, 0xea, 0xc5,
	0xb5, 0x03, 0x7d, 0xfd, 0x00, 0xdc, 0x0c, 0xc2, 0x48, 0x2e, 0xd2, 0x29, 0xf6, 0xef, 0x67, 0x38,
	0xb8, 0x93, 0x78, 0xc1, 0xf1, 0x8c, 0xad, 0xc8, 0x82, 0x77, 0x75, 0xcf, 0x3e, 0x8f, 0xf4, 0xb7,
	0x6b, 0xba, 0xea, 0x86, 0x4c, 0x03, 0x72, 0xec, 0x01, 0xce, 0xcb, 0x31, 0xf3, 0x9e, 0x2b, 0x55,
	0x3a, 0xa4, 0xaf, 0x95, 0x26, 0xe5, 0x02, 0x0f, 0x4d, 0x7a, 0x79, 0x39, 0x1e, 0x79, 0xef, 0x06,
	0x8f, 0x0d, 0x1e, 0x97, 0x78, 0x3c, 0xf2, 0xa6, 0x35, 0x13, 0x70, 0xf6, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0x9a, 0x60, 0xf5, 0xa7, 0xdd, 0x01, 0x00, 0x00,
}

func (this *Update) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Update)
	if !ok {
		that2, ok := that.(Update)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.UpdateMask) != len(that1.UpdateMask) {
		return false
	}
	for i := range this.UpdateMask {
		if this.UpdateMask[i] != that1.UpdateMask[i] {
			return false
		}
	}
	if this.ValidateOnly != that1.ValidateOnly {
		return false
	}
	if this.RequestID != that1.RequestID {
		return false
	}
	if this.SkipResult != that1.SkipResult {
		return false
	}
	return true
}
func (this *Update) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&requestv1.Update{")
	s = append(s, "UpdateMask: "+fmt.Sprintf("%#v", this.UpdateMask)+",\n")
	s = append(s, "ValidateOnly: "+fmt.Sprintf("%#v", this.ValidateOnly)+",\n")
	s = append(s, "RequestID: "+fmt.Sprintf("%#v", this.RequestID)+",\n")
	s = append(s, "SkipResult: "+fmt.Sprintf("%#v", this.SkipResult)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringUpdate(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Update) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Update) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Update) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SkipResult {
		i--
		if m.SkipResult {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.RequestID) > 0 {
		i -= len(m.RequestID)
		copy(dAtA[i:], m.RequestID)
		i = encodeVarintUpdate(dAtA, i, uint64(len(m.RequestID)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ValidateOnly {
		i--
		if m.ValidateOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.UpdateMask) > 0 {
		for iNdEx := len(m.UpdateMask) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UpdateMask[iNdEx])
			copy(dAtA[i:], m.UpdateMask[iNdEx])
			i = encodeVarintUpdate(dAtA, i, uint64(len(m.UpdateMask[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintUpdate(dAtA []byte, offset int, v uint64) int {
	offset -= sovUpdate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Update) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UpdateMask) > 0 {
		for _, s := range m.UpdateMask {
			l = len(s)
			n += 1 + l + sovUpdate(uint64(l))
		}
	}
	if m.ValidateOnly {
		n += 2
	}
	l = len(m.RequestID)
	if l > 0 {
		n += 1 + l + sovUpdate(uint64(l))
	}
	if m.SkipResult {
		n += 2
	}
	return n
}

func sovUpdate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUpdate(x uint64) (n int) {
	return sovUpdate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Update) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Update{`,
		`UpdateMask:` + fmt.Sprintf("%v", this.UpdateMask) + `,`,
		`ValidateOnly:` + fmt.Sprintf("%v", this.ValidateOnly) + `,`,
		`RequestID:` + fmt.Sprintf("%v", this.RequestID) + `,`,
		`SkipResult:` + fmt.Sprintf("%v", this.SkipResult) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringUpdate(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Update) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUpdate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Update: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Update: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateMask", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdateMask = append(m.UpdateMask, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidateOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ValidateOnly = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUpdate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUpdate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipResult", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUpdate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipResult = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipUpdate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUpdate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUpdate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUpdate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpdate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUpdate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUpdate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUpdate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUpdate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUpdate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUpdate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUpdate = fmt.Errorf("proto: unexpected end of group")
)
